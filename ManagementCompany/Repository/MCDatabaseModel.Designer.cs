//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("MCDatabaseModel", "BuildingHeatSupplier", "Building", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Repository.Building), "HeatSupplier", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Repository.HeatSupplier))]
[assembly: EdmRelationshipAttribute("MCDatabaseModel", "BuildingMeterReading", "Building", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Repository.Building), "MeterReading", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Repository.MeterReading))]
[assembly: EdmRelationshipAttribute("MCDatabaseModel", "DateTimeIntervalMeterReading", "DateTimeInterval", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Repository.DateTimeInterval), "MeterReading", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Repository.MeterReading))]
[assembly: EdmRelationshipAttribute("MCDatabaseModel", "DateTimeIntervalHeatSupplier", "DateTimeInterval", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Repository.DateTimeInterval), "HeatSupplier", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Repository.HeatSupplier))]
[assembly: EdmRelationshipAttribute("MCDatabaseModel", "BuildingClearing", "Building", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Repository.Building), "Clearing", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Repository.Clearing))]
[assembly: EdmRelationshipAttribute("MCDatabaseModel", "DateTimeIntervalClearing", "DateTimeInterval", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Repository.DateTimeInterval), "Clearing", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Repository.Clearing))]
[assembly: EdmRelationshipAttribute("MCDatabaseModel", "DateTimeIntervalContractConsumptionHeat", "DateTimeInterval", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Repository.DateTimeInterval), "ContractConsumptionHeat", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Repository.ContractConsumptionHeat))]
[assembly: EdmRelationshipAttribute("MCDatabaseModel", "ContractConsumptionHeatBuilding", "ContractConsumptionHeat", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Repository.ContractConsumptionHeat), "Building", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Repository.Building))]
[assembly: EdmRelationshipAttribute("MCDatabaseModel", "ContractConsumptionHeatThermometerReading", "ContractConsumptionHeat", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Repository.ContractConsumptionHeat), "ThermometerReading", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Repository.ThermometerReading))]
[assembly: EdmRelationshipAttribute("MCDatabaseModel", "NormativeCalculationBuilding", "NormativeCalculation", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Repository.NormativeCalculation), "Building", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Repository.Building))]
[assembly: EdmRelationshipAttribute("MCDatabaseModel", "DateTimeIntervalNormativeCalculation", "DateTimeInterval", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Repository.DateTimeInterval), "NormativeCalculation", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Repository.NormativeCalculation))]
[assembly: EdmRelationshipAttribute("MCDatabaseModel", "BuildingBuildingMonthVariables", "Building", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Repository.Building), "BuildingMonthVariables", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Repository.BuildingMonthVariables))]
[assembly: EdmRelationshipAttribute("MCDatabaseModel", "DateTimeIntervalBuildingMonthVariables", "DateTimeInterval", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Repository.DateTimeInterval), "BuildingMonthVariables", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Repository.BuildingMonthVariables))]

#endregion

namespace Repository
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class MCDatabaseModelContainer : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new MCDatabaseModelContainer object using the connection string found in the 'MCDatabaseModelContainer' section of the application configuration file.
        /// </summary>
        public MCDatabaseModelContainer() : base("name=MCDatabaseModelContainer", "MCDatabaseModelContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new MCDatabaseModelContainer object.
        /// </summary>
        public MCDatabaseModelContainer(string connectionString) : base(connectionString, "MCDatabaseModelContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new MCDatabaseModelContainer object.
        /// </summary>
        public MCDatabaseModelContainer(EntityConnection connection) : base(connection, "MCDatabaseModelContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Building> Buildings
        {
            get
            {
                if ((_Buildings == null))
                {
                    _Buildings = base.CreateObjectSet<Building>("Buildings");
                }
                return _Buildings;
            }
        }
        private ObjectSet<Building> _Buildings;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<DateTimeInterval> DateTimeIntervals
        {
            get
            {
                if ((_DateTimeIntervals == null))
                {
                    _DateTimeIntervals = base.CreateObjectSet<DateTimeInterval>("DateTimeIntervals");
                }
                return _DateTimeIntervals;
            }
        }
        private ObjectSet<DateTimeInterval> _DateTimeIntervals;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<NormativeCalculation> NormativeCalculations
        {
            get
            {
                if ((_NormativeCalculations == null))
                {
                    _NormativeCalculations = base.CreateObjectSet<NormativeCalculation>("NormativeCalculations");
                }
                return _NormativeCalculations;
            }
        }
        private ObjectSet<NormativeCalculation> _NormativeCalculations;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ContractConsumptionHeat> ContractConsumptionHeats
        {
            get
            {
                if ((_ContractConsumptionHeats == null))
                {
                    _ContractConsumptionHeats = base.CreateObjectSet<ContractConsumptionHeat>("ContractConsumptionHeats");
                }
                return _ContractConsumptionHeats;
            }
        }
        private ObjectSet<ContractConsumptionHeat> _ContractConsumptionHeats;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<MeterReading> MeterReadings
        {
            get
            {
                if ((_MeterReadings == null))
                {
                    _MeterReadings = base.CreateObjectSet<MeterReading>("MeterReadings");
                }
                return _MeterReadings;
            }
        }
        private ObjectSet<MeterReading> _MeterReadings;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Clearing> Clearings
        {
            get
            {
                if ((_Clearings == null))
                {
                    _Clearings = base.CreateObjectSet<Clearing>("Clearings");
                }
                return _Clearings;
            }
        }
        private ObjectSet<Clearing> _Clearings;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<HeatSupplier> HeatSuppliers
        {
            get
            {
                if ((_HeatSuppliers == null))
                {
                    _HeatSuppliers = base.CreateObjectSet<HeatSupplier>("HeatSuppliers");
                }
                return _HeatSuppliers;
            }
        }
        private ObjectSet<HeatSupplier> _HeatSuppliers;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ThermometerReading> ThermometerReadings
        {
            get
            {
                if ((_ThermometerReadings == null))
                {
                    _ThermometerReadings = base.CreateObjectSet<ThermometerReading>("ThermometerReadings");
                }
                return _ThermometerReadings;
            }
        }
        private ObjectSet<ThermometerReading> _ThermometerReadings;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<WholeTable> WholeTableSet
        {
            get
            {
                if ((_WholeTableSet == null))
                {
                    _WholeTableSet = base.CreateObjectSet<WholeTable>("WholeTableSet");
                }
                return _WholeTableSet;
            }
        }
        private ObjectSet<WholeTable> _WholeTableSet;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<BuildingMonthVariables> BuildingMonthVariablesTable
        {
            get
            {
                if ((_BuildingMonthVariablesTable == null))
                {
                    _BuildingMonthVariablesTable = base.CreateObjectSet<BuildingMonthVariables>("BuildingMonthVariablesTable");
                }
                return _BuildingMonthVariablesTable;
            }
        }
        private ObjectSet<BuildingMonthVariables> _BuildingMonthVariablesTable;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Buildings EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToBuildings(Building building)
        {
            base.AddObject("Buildings", building);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the DateTimeIntervals EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToDateTimeIntervals(DateTimeInterval dateTimeInterval)
        {
            base.AddObject("DateTimeIntervals", dateTimeInterval);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the NormativeCalculations EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToNormativeCalculations(NormativeCalculation normativeCalculation)
        {
            base.AddObject("NormativeCalculations", normativeCalculation);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ContractConsumptionHeats EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToContractConsumptionHeats(ContractConsumptionHeat contractConsumptionHeat)
        {
            base.AddObject("ContractConsumptionHeats", contractConsumptionHeat);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the MeterReadings EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToMeterReadings(MeterReading meterReading)
        {
            base.AddObject("MeterReadings", meterReading);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Clearings EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToClearings(Clearing clearing)
        {
            base.AddObject("Clearings", clearing);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the HeatSuppliers EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToHeatSuppliers(HeatSupplier heatSupplier)
        {
            base.AddObject("HeatSuppliers", heatSupplier);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ThermometerReadings EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToThermometerReadings(ThermometerReading thermometerReading)
        {
            base.AddObject("ThermometerReadings", thermometerReading);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the WholeTableSet EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToWholeTableSet(WholeTable wholeTable)
        {
            base.AddObject("WholeTableSet", wholeTable);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the BuildingMonthVariablesTable EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToBuildingMonthVariablesTable(BuildingMonthVariables buildingMonthVariables)
        {
            base.AddObject("BuildingMonthVariablesTable", buildingMonthVariables);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MCDatabaseModel", Name="Building")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Building : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Building object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="standartOfHeat">Initial value of the StandartOfHeat property.</param>
        /// <param name="totalArea">Initial value of the TotalArea property.</param>
        public static Building CreateBuilding(global::System.Int32 id, global::System.String name, global::System.Double standartOfHeat, global::System.Double totalArea)
        {
            Building building = new Building();
            building.Id = id;
            building.Name = name;
            building.StandartOfHeat = standartOfHeat;
            building.TotalArea = totalArea;
            return building;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double StandartOfHeat
        {
            get
            {
                return _StandartOfHeat;
            }
            set
            {
                OnStandartOfHeatChanging(value);
                ReportPropertyChanging("StandartOfHeat");
                _StandartOfHeat = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StandartOfHeat");
                OnStandartOfHeatChanged();
            }
        }
        private global::System.Double _StandartOfHeat;
        partial void OnStandartOfHeatChanging(global::System.Double value);
        partial void OnStandartOfHeatChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double TotalArea
        {
            get
            {
                return _TotalArea;
            }
            set
            {
                OnTotalAreaChanging(value);
                ReportPropertyChanging("TotalArea");
                _TotalArea = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TotalArea");
                OnTotalAreaChanged();
            }
        }
        private global::System.Double _TotalArea;
        partial void OnTotalAreaChanging(global::System.Double value);
        partial void OnTotalAreaChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "BuildingHeatSupplier", "HeatSupplier")]
        public HeatSupplier HeatSupplier
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<HeatSupplier>("MCDatabaseModel.BuildingHeatSupplier", "HeatSupplier").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<HeatSupplier>("MCDatabaseModel.BuildingHeatSupplier", "HeatSupplier").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<HeatSupplier> HeatSupplierReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<HeatSupplier>("MCDatabaseModel.BuildingHeatSupplier", "HeatSupplier");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<HeatSupplier>("MCDatabaseModel.BuildingHeatSupplier", "HeatSupplier", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "BuildingMeterReading", "MeterReading")]
        public EntityCollection<MeterReading> MeterReading
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<MeterReading>("MCDatabaseModel.BuildingMeterReading", "MeterReading");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<MeterReading>("MCDatabaseModel.BuildingMeterReading", "MeterReading", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "BuildingClearing", "Clearing")]
        public EntityCollection<Clearing> Clearing
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Clearing>("MCDatabaseModel.BuildingClearing", "Clearing");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Clearing>("MCDatabaseModel.BuildingClearing", "Clearing", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "ContractConsumptionHeatBuilding", "ContractConsumptionHeat")]
        public EntityCollection<ContractConsumptionHeat> ContractConsumptionHeat
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ContractConsumptionHeat>("MCDatabaseModel.ContractConsumptionHeatBuilding", "ContractConsumptionHeat");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ContractConsumptionHeat>("MCDatabaseModel.ContractConsumptionHeatBuilding", "ContractConsumptionHeat", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "NormativeCalculationBuilding", "NormativeCalculation")]
        public EntityCollection<NormativeCalculation> NormativeCalculation
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<NormativeCalculation>("MCDatabaseModel.NormativeCalculationBuilding", "NormativeCalculation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<NormativeCalculation>("MCDatabaseModel.NormativeCalculationBuilding", "NormativeCalculation", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "BuildingBuildingMonthVariables", "BuildingMonthVariables")]
        public EntityCollection<BuildingMonthVariables> BuildingMonthVariables
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<BuildingMonthVariables>("MCDatabaseModel.BuildingBuildingMonthVariables", "BuildingMonthVariables");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<BuildingMonthVariables>("MCDatabaseModel.BuildingBuildingMonthVariables", "BuildingMonthVariables", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MCDatabaseModel", Name="BuildingMonthVariables")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class BuildingMonthVariables : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new BuildingMonthVariables object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="calculationArea">Initial value of the CalculationArea property.</param>
        /// <param name="countOfPeople">Initial value of the CountOfPeople property.</param>
        public static BuildingMonthVariables CreateBuildingMonthVariables(global::System.Int32 id, global::System.Double calculationArea, global::System.Int32 countOfPeople)
        {
            BuildingMonthVariables buildingMonthVariables = new BuildingMonthVariables();
            buildingMonthVariables.Id = id;
            buildingMonthVariables.CalculationArea = calculationArea;
            buildingMonthVariables.CountOfPeople = countOfPeople;
            return buildingMonthVariables;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double CalculationArea
        {
            get
            {
                return _CalculationArea;
            }
            set
            {
                OnCalculationAreaChanging(value);
                ReportPropertyChanging("CalculationArea");
                _CalculationArea = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CalculationArea");
                OnCalculationAreaChanged();
            }
        }
        private global::System.Double _CalculationArea;
        partial void OnCalculationAreaChanging(global::System.Double value);
        partial void OnCalculationAreaChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CountOfPeople
        {
            get
            {
                return _CountOfPeople;
            }
            set
            {
                OnCountOfPeopleChanging(value);
                ReportPropertyChanging("CountOfPeople");
                _CountOfPeople = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CountOfPeople");
                OnCountOfPeopleChanged();
            }
        }
        private global::System.Int32 _CountOfPeople;
        partial void OnCountOfPeopleChanging(global::System.Int32 value);
        partial void OnCountOfPeopleChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "BuildingBuildingMonthVariables", "Building")]
        public Building Building
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Building>("MCDatabaseModel.BuildingBuildingMonthVariables", "Building").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Building>("MCDatabaseModel.BuildingBuildingMonthVariables", "Building").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Building> BuildingReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Building>("MCDatabaseModel.BuildingBuildingMonthVariables", "Building");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Building>("MCDatabaseModel.BuildingBuildingMonthVariables", "Building", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "DateTimeIntervalBuildingMonthVariables", "DateTimeInterval")]
        public DateTimeInterval DateTimeInterval
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DateTimeInterval>("MCDatabaseModel.DateTimeIntervalBuildingMonthVariables", "DateTimeInterval").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DateTimeInterval>("MCDatabaseModel.DateTimeIntervalBuildingMonthVariables", "DateTimeInterval").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<DateTimeInterval> DateTimeIntervalReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DateTimeInterval>("MCDatabaseModel.DateTimeIntervalBuildingMonthVariables", "DateTimeInterval");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<DateTimeInterval>("MCDatabaseModel.DateTimeIntervalBuildingMonthVariables", "DateTimeInterval", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MCDatabaseModel", Name="Clearing")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Clearing : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Clearing object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="requirements">Initial value of the Requirements property.</param>
        /// <param name="calculationByBughaltery">Initial value of the CalculationByBughaltery property.</param>
        /// <param name="calculationHot">Initial value of the CalculationHot property.</param>
        public static Clearing CreateClearing(global::System.Int32 id, global::System.Double requirements, global::System.Double calculationByBughaltery, global::System.Double calculationHot)
        {
            Clearing clearing = new Clearing();
            clearing.Id = id;
            clearing.Requirements = requirements;
            clearing.CalculationByBughaltery = calculationByBughaltery;
            clearing.CalculationHot = calculationHot;
            return clearing;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Requirements
        {
            get
            {
                return _Requirements;
            }
            set
            {
                OnRequirementsChanging(value);
                ReportPropertyChanging("Requirements");
                _Requirements = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Requirements");
                OnRequirementsChanged();
            }
        }
        private global::System.Double _Requirements;
        partial void OnRequirementsChanging(global::System.Double value);
        partial void OnRequirementsChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double CalculationByBughaltery
        {
            get
            {
                return _CalculationByBughaltery;
            }
            set
            {
                OnCalculationByBughalteryChanging(value);
                ReportPropertyChanging("CalculationByBughaltery");
                _CalculationByBughaltery = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CalculationByBughaltery");
                OnCalculationByBughalteryChanged();
            }
        }
        private global::System.Double _CalculationByBughaltery;
        partial void OnCalculationByBughalteryChanging(global::System.Double value);
        partial void OnCalculationByBughalteryChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double CalculationHot
        {
            get
            {
                return _CalculationHot;
            }
            set
            {
                OnCalculationHotChanging(value);
                ReportPropertyChanging("CalculationHot");
                _CalculationHot = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CalculationHot");
                OnCalculationHotChanged();
            }
        }
        private global::System.Double _CalculationHot;
        partial void OnCalculationHotChanging(global::System.Double value);
        partial void OnCalculationHotChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "BuildingClearing", "Building")]
        public Building Building
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Building>("MCDatabaseModel.BuildingClearing", "Building").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Building>("MCDatabaseModel.BuildingClearing", "Building").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Building> BuildingReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Building>("MCDatabaseModel.BuildingClearing", "Building");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Building>("MCDatabaseModel.BuildingClearing", "Building", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "DateTimeIntervalClearing", "DateTimeInterval")]
        public DateTimeInterval DateTimeInterval
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DateTimeInterval>("MCDatabaseModel.DateTimeIntervalClearing", "DateTimeInterval").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DateTimeInterval>("MCDatabaseModel.DateTimeIntervalClearing", "DateTimeInterval").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<DateTimeInterval> DateTimeIntervalReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DateTimeInterval>("MCDatabaseModel.DateTimeIntervalClearing", "DateTimeInterval");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<DateTimeInterval>("MCDatabaseModel.DateTimeIntervalClearing", "DateTimeInterval", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MCDatabaseModel", Name="ContractConsumptionHeat")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ContractConsumptionHeat : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ContractConsumptionHeat object.
        /// </summary>
        /// <param name="id">Initial value of the ID property.</param>
        /// <param name="heatByLoading">Initial value of the HeatByLoading property.</param>
        /// <param name="hotWaterByNorm">Initial value of the HotWaterByNorm property.</param>
        /// <param name="totalHeatConsumption">Initial value of the TotalHeatConsumption property.</param>
        public static ContractConsumptionHeat CreateContractConsumptionHeat(global::System.Int32 id, global::System.Double heatByLoading, global::System.Double hotWaterByNorm, global::System.Double totalHeatConsumption)
        {
            ContractConsumptionHeat contractConsumptionHeat = new ContractConsumptionHeat();
            contractConsumptionHeat.ID = id;
            contractConsumptionHeat.HeatByLoading = heatByLoading;
            contractConsumptionHeat.HotWaterByNorm = hotWaterByNorm;
            contractConsumptionHeat.TotalHeatConsumption = totalHeatConsumption;
            return contractConsumptionHeat;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double HeatByLoading
        {
            get
            {
                return _HeatByLoading;
            }
            set
            {
                OnHeatByLoadingChanging(value);
                ReportPropertyChanging("HeatByLoading");
                _HeatByLoading = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("HeatByLoading");
                OnHeatByLoadingChanged();
            }
        }
        private global::System.Double _HeatByLoading;
        partial void OnHeatByLoadingChanging(global::System.Double value);
        partial void OnHeatByLoadingChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double HotWaterByNorm
        {
            get
            {
                return _HotWaterByNorm;
            }
            set
            {
                OnHotWaterByNormChanging(value);
                ReportPropertyChanging("HotWaterByNorm");
                _HotWaterByNorm = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("HotWaterByNorm");
                OnHotWaterByNormChanged();
            }
        }
        private global::System.Double _HotWaterByNorm;
        partial void OnHotWaterByNormChanging(global::System.Double value);
        partial void OnHotWaterByNormChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double TotalHeatConsumption
        {
            get
            {
                return _TotalHeatConsumption;
            }
            set
            {
                OnTotalHeatConsumptionChanging(value);
                ReportPropertyChanging("TotalHeatConsumption");
                _TotalHeatConsumption = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TotalHeatConsumption");
                OnTotalHeatConsumptionChanged();
            }
        }
        private global::System.Double _TotalHeatConsumption;
        partial void OnTotalHeatConsumptionChanging(global::System.Double value);
        partial void OnTotalHeatConsumptionChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "DateTimeIntervalContractConsumptionHeat", "DateTimeInterval")]
        public DateTimeInterval DateTimeInterval
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DateTimeInterval>("MCDatabaseModel.DateTimeIntervalContractConsumptionHeat", "DateTimeInterval").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DateTimeInterval>("MCDatabaseModel.DateTimeIntervalContractConsumptionHeat", "DateTimeInterval").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<DateTimeInterval> DateTimeIntervalReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DateTimeInterval>("MCDatabaseModel.DateTimeIntervalContractConsumptionHeat", "DateTimeInterval");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<DateTimeInterval>("MCDatabaseModel.DateTimeIntervalContractConsumptionHeat", "DateTimeInterval", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "ContractConsumptionHeatBuilding", "Building")]
        public Building Building
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Building>("MCDatabaseModel.ContractConsumptionHeatBuilding", "Building").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Building>("MCDatabaseModel.ContractConsumptionHeatBuilding", "Building").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Building> BuildingReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Building>("MCDatabaseModel.ContractConsumptionHeatBuilding", "Building");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Building>("MCDatabaseModel.ContractConsumptionHeatBuilding", "Building", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "ContractConsumptionHeatThermometerReading", "ThermometerReading")]
        public ThermometerReading ThermometerReading
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ThermometerReading>("MCDatabaseModel.ContractConsumptionHeatThermometerReading", "ThermometerReading").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ThermometerReading>("MCDatabaseModel.ContractConsumptionHeatThermometerReading", "ThermometerReading").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ThermometerReading> ThermometerReadingReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ThermometerReading>("MCDatabaseModel.ContractConsumptionHeatThermometerReading", "ThermometerReading");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ThermometerReading>("MCDatabaseModel.ContractConsumptionHeatThermometerReading", "ThermometerReading", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MCDatabaseModel", Name="DateTimeInterval")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class DateTimeInterval : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new DateTimeInterval object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="startDate">Initial value of the StartDate property.</param>
        /// <param name="endDate">Initial value of the EndDate property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static DateTimeInterval CreateDateTimeInterval(global::System.Int32 id, global::System.DateTime startDate, global::System.DateTime endDate, global::System.String name)
        {
            DateTimeInterval dateTimeInterval = new DateTimeInterval();
            dateTimeInterval.Id = id;
            dateTimeInterval.StartDate = startDate;
            dateTimeInterval.EndDate = endDate;
            dateTimeInterval.Name = name;
            return dateTimeInterval;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime StartDate
        {
            get
            {
                return _StartDate;
            }
            set
            {
                OnStartDateChanging(value);
                ReportPropertyChanging("StartDate");
                _StartDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StartDate");
                OnStartDateChanged();
            }
        }
        private global::System.DateTime _StartDate;
        partial void OnStartDateChanging(global::System.DateTime value);
        partial void OnStartDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime EndDate
        {
            get
            {
                return _EndDate;
            }
            set
            {
                OnEndDateChanging(value);
                ReportPropertyChanging("EndDate");
                _EndDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EndDate");
                OnEndDateChanged();
            }
        }
        private global::System.DateTime _EndDate;
        partial void OnEndDateChanging(global::System.DateTime value);
        partial void OnEndDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "DateTimeIntervalMeterReading", "MeterReading")]
        public MeterReading MeterReading
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MeterReading>("MCDatabaseModel.DateTimeIntervalMeterReading", "MeterReading").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MeterReading>("MCDatabaseModel.DateTimeIntervalMeterReading", "MeterReading").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<MeterReading> MeterReadingReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MeterReading>("MCDatabaseModel.DateTimeIntervalMeterReading", "MeterReading");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<MeterReading>("MCDatabaseModel.DateTimeIntervalMeterReading", "MeterReading", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "DateTimeIntervalHeatSupplier", "HeatSupplier")]
        public HeatSupplier HeatSupplier
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<HeatSupplier>("MCDatabaseModel.DateTimeIntervalHeatSupplier", "HeatSupplier").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<HeatSupplier>("MCDatabaseModel.DateTimeIntervalHeatSupplier", "HeatSupplier").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<HeatSupplier> HeatSupplierReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<HeatSupplier>("MCDatabaseModel.DateTimeIntervalHeatSupplier", "HeatSupplier");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<HeatSupplier>("MCDatabaseModel.DateTimeIntervalHeatSupplier", "HeatSupplier", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "DateTimeIntervalClearing", "Clearing")]
        public Clearing Clearing
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Clearing>("MCDatabaseModel.DateTimeIntervalClearing", "Clearing").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Clearing>("MCDatabaseModel.DateTimeIntervalClearing", "Clearing").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Clearing> ClearingReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Clearing>("MCDatabaseModel.DateTimeIntervalClearing", "Clearing");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Clearing>("MCDatabaseModel.DateTimeIntervalClearing", "Clearing", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "DateTimeIntervalContractConsumptionHeat", "ContractConsumptionHeat")]
        public ContractConsumptionHeat ContractConsumptionHeat
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ContractConsumptionHeat>("MCDatabaseModel.DateTimeIntervalContractConsumptionHeat", "ContractConsumptionHeat").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ContractConsumptionHeat>("MCDatabaseModel.DateTimeIntervalContractConsumptionHeat", "ContractConsumptionHeat").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ContractConsumptionHeat> ContractConsumptionHeatReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ContractConsumptionHeat>("MCDatabaseModel.DateTimeIntervalContractConsumptionHeat", "ContractConsumptionHeat");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ContractConsumptionHeat>("MCDatabaseModel.DateTimeIntervalContractConsumptionHeat", "ContractConsumptionHeat", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "DateTimeIntervalNormativeCalculation", "NormativeCalculation")]
        public NormativeCalculation NormativeCalculation
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<NormativeCalculation>("MCDatabaseModel.DateTimeIntervalNormativeCalculation", "NormativeCalculation").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<NormativeCalculation>("MCDatabaseModel.DateTimeIntervalNormativeCalculation", "NormativeCalculation").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<NormativeCalculation> NormativeCalculationReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<NormativeCalculation>("MCDatabaseModel.DateTimeIntervalNormativeCalculation", "NormativeCalculation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<NormativeCalculation>("MCDatabaseModel.DateTimeIntervalNormativeCalculation", "NormativeCalculation", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "DateTimeIntervalBuildingMonthVariables", "BuildingMonthVariables")]
        public BuildingMonthVariables BuildingMonthVariables
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<BuildingMonthVariables>("MCDatabaseModel.DateTimeIntervalBuildingMonthVariables", "BuildingMonthVariables").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<BuildingMonthVariables>("MCDatabaseModel.DateTimeIntervalBuildingMonthVariables", "BuildingMonthVariables").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<BuildingMonthVariables> BuildingMonthVariablesReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<BuildingMonthVariables>("MCDatabaseModel.DateTimeIntervalBuildingMonthVariables", "BuildingMonthVariables");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<BuildingMonthVariables>("MCDatabaseModel.DateTimeIntervalBuildingMonthVariables", "BuildingMonthVariables", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MCDatabaseModel", Name="HeatSupplier")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class HeatSupplier : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new HeatSupplier object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="description">Initial value of the Description property.</param>
        public static HeatSupplier CreateHeatSupplier(global::System.Int32 id, global::System.String name, global::System.String description)
        {
            HeatSupplier heatSupplier = new HeatSupplier();
            heatSupplier.Id = id;
            heatSupplier.Name = name;
            heatSupplier.Description = description;
            return heatSupplier;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "BuildingHeatSupplier", "Building")]
        public EntityCollection<Building> Building
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Building>("MCDatabaseModel.BuildingHeatSupplier", "Building");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Building>("MCDatabaseModel.BuildingHeatSupplier", "Building", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "DateTimeIntervalHeatSupplier", "DateTimeInterval")]
        public EntityCollection<DateTimeInterval> DateTimeInterval
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<DateTimeInterval>("MCDatabaseModel.DateTimeIntervalHeatSupplier", "DateTimeInterval");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<DateTimeInterval>("MCDatabaseModel.DateTimeIntervalHeatSupplier", "DateTimeInterval", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MCDatabaseModel", Name="MeterReading")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class MeterReading : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new MeterReading object.
        /// </summary>
        /// <param name="id">Initial value of the ID property.</param>
        /// <param name="currentHeatMeterReader">Initial value of the CurrentHeatMeterReader property.</param>
        /// <param name="currentWaterHeatReader">Initial value of the CurrentWaterHeatReader property.</param>
        public static MeterReading CreateMeterReading(global::System.Int32 id, global::System.Double currentHeatMeterReader, global::System.Double currentWaterHeatReader)
        {
            MeterReading meterReading = new MeterReading();
            meterReading.ID = id;
            meterReading.CurrentHeatMeterReader = currentHeatMeterReader;
            meterReading.CurrentWaterHeatReader = currentWaterHeatReader;
            return meterReading;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double CurrentHeatMeterReader
        {
            get
            {
                return _CurrentHeatMeterReader;
            }
            set
            {
                OnCurrentHeatMeterReaderChanging(value);
                ReportPropertyChanging("CurrentHeatMeterReader");
                _CurrentHeatMeterReader = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CurrentHeatMeterReader");
                OnCurrentHeatMeterReaderChanged();
            }
        }
        private global::System.Double _CurrentHeatMeterReader;
        partial void OnCurrentHeatMeterReaderChanging(global::System.Double value);
        partial void OnCurrentHeatMeterReaderChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double CurrentWaterHeatReader
        {
            get
            {
                return _CurrentWaterHeatReader;
            }
            set
            {
                OnCurrentWaterHeatReaderChanging(value);
                ReportPropertyChanging("CurrentWaterHeatReader");
                _CurrentWaterHeatReader = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CurrentWaterHeatReader");
                OnCurrentWaterHeatReaderChanged();
            }
        }
        private global::System.Double _CurrentWaterHeatReader;
        partial void OnCurrentWaterHeatReaderChanging(global::System.Double value);
        partial void OnCurrentWaterHeatReaderChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "BuildingMeterReading", "Building")]
        public Building Building
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Building>("MCDatabaseModel.BuildingMeterReading", "Building").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Building>("MCDatabaseModel.BuildingMeterReading", "Building").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Building> BuildingReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Building>("MCDatabaseModel.BuildingMeterReading", "Building");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Building>("MCDatabaseModel.BuildingMeterReading", "Building", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "DateTimeIntervalMeterReading", "DateTimeInterval")]
        public DateTimeInterval DateTimeInterval
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DateTimeInterval>("MCDatabaseModel.DateTimeIntervalMeterReading", "DateTimeInterval").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DateTimeInterval>("MCDatabaseModel.DateTimeIntervalMeterReading", "DateTimeInterval").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<DateTimeInterval> DateTimeIntervalReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DateTimeInterval>("MCDatabaseModel.DateTimeIntervalMeterReading", "DateTimeInterval");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<DateTimeInterval>("MCDatabaseModel.DateTimeIntervalMeterReading", "DateTimeInterval", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MCDatabaseModel", Name="NormativeCalculation")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class NormativeCalculation : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new NormativeCalculation object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="estimateConsumptionHeat">Initial value of the EstimateConsumptionHeat property.</param>
        /// <param name="consumptionHeatByTotalArea">Initial value of the ConsumptionHeatByTotalArea property.</param>
        /// <param name="consumptionHeatByCalculationArea">Initial value of the ConsumptionHeatByCalculationArea property.</param>
        /// <param name="totalHeatConsumption">Initial value of the TotalHeatConsumption property.</param>
        public static NormativeCalculation CreateNormativeCalculation(global::System.Int32 id, global::System.Double estimateConsumptionHeat, global::System.Double consumptionHeatByTotalArea, global::System.Double consumptionHeatByCalculationArea, global::System.Double totalHeatConsumption)
        {
            NormativeCalculation normativeCalculation = new NormativeCalculation();
            normativeCalculation.Id = id;
            normativeCalculation.EstimateConsumptionHeat = estimateConsumptionHeat;
            normativeCalculation.ConsumptionHeatByTotalArea = consumptionHeatByTotalArea;
            normativeCalculation.ConsumptionHeatByCalculationArea = consumptionHeatByCalculationArea;
            normativeCalculation.TotalHeatConsumption = totalHeatConsumption;
            return normativeCalculation;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double EstimateConsumptionHeat
        {
            get
            {
                return _EstimateConsumptionHeat;
            }
            set
            {
                OnEstimateConsumptionHeatChanging(value);
                ReportPropertyChanging("EstimateConsumptionHeat");
                _EstimateConsumptionHeat = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EstimateConsumptionHeat");
                OnEstimateConsumptionHeatChanged();
            }
        }
        private global::System.Double _EstimateConsumptionHeat;
        partial void OnEstimateConsumptionHeatChanging(global::System.Double value);
        partial void OnEstimateConsumptionHeatChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double ConsumptionHeatByTotalArea
        {
            get
            {
                return _ConsumptionHeatByTotalArea;
            }
            set
            {
                OnConsumptionHeatByTotalAreaChanging(value);
                ReportPropertyChanging("ConsumptionHeatByTotalArea");
                _ConsumptionHeatByTotalArea = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ConsumptionHeatByTotalArea");
                OnConsumptionHeatByTotalAreaChanged();
            }
        }
        private global::System.Double _ConsumptionHeatByTotalArea;
        partial void OnConsumptionHeatByTotalAreaChanging(global::System.Double value);
        partial void OnConsumptionHeatByTotalAreaChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double ConsumptionHeatByCalculationArea
        {
            get
            {
                return _ConsumptionHeatByCalculationArea;
            }
            set
            {
                OnConsumptionHeatByCalculationAreaChanging(value);
                ReportPropertyChanging("ConsumptionHeatByCalculationArea");
                _ConsumptionHeatByCalculationArea = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ConsumptionHeatByCalculationArea");
                OnConsumptionHeatByCalculationAreaChanged();
            }
        }
        private global::System.Double _ConsumptionHeatByCalculationArea;
        partial void OnConsumptionHeatByCalculationAreaChanging(global::System.Double value);
        partial void OnConsumptionHeatByCalculationAreaChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double TotalHeatConsumption
        {
            get
            {
                return _TotalHeatConsumption;
            }
            set
            {
                OnTotalHeatConsumptionChanging(value);
                ReportPropertyChanging("TotalHeatConsumption");
                _TotalHeatConsumption = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TotalHeatConsumption");
                OnTotalHeatConsumptionChanged();
            }
        }
        private global::System.Double _TotalHeatConsumption;
        partial void OnTotalHeatConsumptionChanging(global::System.Double value);
        partial void OnTotalHeatConsumptionChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "NormativeCalculationBuilding", "Building")]
        public Building Building
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Building>("MCDatabaseModel.NormativeCalculationBuilding", "Building").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Building>("MCDatabaseModel.NormativeCalculationBuilding", "Building").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Building> BuildingReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Building>("MCDatabaseModel.NormativeCalculationBuilding", "Building");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Building>("MCDatabaseModel.NormativeCalculationBuilding", "Building", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "DateTimeIntervalNormativeCalculation", "DateTimeInterval")]
        public DateTimeInterval DateTimeInterval
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DateTimeInterval>("MCDatabaseModel.DateTimeIntervalNormativeCalculation", "DateTimeInterval").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DateTimeInterval>("MCDatabaseModel.DateTimeIntervalNormativeCalculation", "DateTimeInterval").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<DateTimeInterval> DateTimeIntervalReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DateTimeInterval>("MCDatabaseModel.DateTimeIntervalNormativeCalculation", "DateTimeInterval");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<DateTimeInterval>("MCDatabaseModel.DateTimeIntervalNormativeCalculation", "DateTimeInterval", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MCDatabaseModel", Name="ThermometerReading")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ThermometerReading : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ThermometerReading object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="month">Initial value of the Month property.</param>
        /// <param name="year">Initial value of the Year property.</param>
        /// <param name="airTemperature">Initial value of the AirTemperature property.</param>
        public static ThermometerReading CreateThermometerReading(global::System.Int32 id, global::System.Int32 month, global::System.Int32 year, global::System.Int32 airTemperature)
        {
            ThermometerReading thermometerReading = new ThermometerReading();
            thermometerReading.Id = id;
            thermometerReading.Month = month;
            thermometerReading.Year = year;
            thermometerReading.AirTemperature = airTemperature;
            return thermometerReading;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Month
        {
            get
            {
                return _Month;
            }
            set
            {
                OnMonthChanging(value);
                ReportPropertyChanging("Month");
                _Month = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Month");
                OnMonthChanged();
            }
        }
        private global::System.Int32 _Month;
        partial void OnMonthChanging(global::System.Int32 value);
        partial void OnMonthChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Year
        {
            get
            {
                return _Year;
            }
            set
            {
                OnYearChanging(value);
                ReportPropertyChanging("Year");
                _Year = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Year");
                OnYearChanged();
            }
        }
        private global::System.Int32 _Year;
        partial void OnYearChanging(global::System.Int32 value);
        partial void OnYearChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 AirTemperature
        {
            get
            {
                return _AirTemperature;
            }
            set
            {
                OnAirTemperatureChanging(value);
                ReportPropertyChanging("AirTemperature");
                _AirTemperature = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("AirTemperature");
                OnAirTemperatureChanged();
            }
        }
        private global::System.Int32 _AirTemperature;
        partial void OnAirTemperatureChanging(global::System.Int32 value);
        partial void OnAirTemperatureChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "ContractConsumptionHeatThermometerReading", "ContractConsumptionHeat")]
        public EntityCollection<ContractConsumptionHeat> ContractConsumptionHeat
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ContractConsumptionHeat>("MCDatabaseModel.ContractConsumptionHeatThermometerReading", "ContractConsumptionHeat");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ContractConsumptionHeat>("MCDatabaseModel.ContractConsumptionHeatThermometerReading", "ContractConsumptionHeat", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MCDatabaseModel", Name="WholeTable")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class WholeTable : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new WholeTable object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="buildingName">Initial value of the BuildingName property.</param>
        /// <param name="buildingDescription">Initial value of the BuildingDescription property.</param>
        /// <param name="buildingStandartOfHeat">Initial value of the BuildingStandartOfHeat property.</param>
        /// <param name="buildingTotalArea">Initial value of the BuildingTotalArea property.</param>
        /// <param name="heatSupplierName">Initial value of the HeatSupplierName property.</param>
        /// <param name="heatSupplierDescription">Initial value of the HeatSupplierDescription property.</param>
        /// <param name="clearingRequirements">Initial value of the ClearingRequirements property.</param>
        /// <param name="clearingCalculationHot">Initial value of the ClearingCalculationHot property.</param>
        /// <param name="clearingCalculationByBuhgaltery">Initial value of the ClearingCalculationByBuhgaltery property.</param>
        /// <param name="meterReadingHeat">Initial value of the MeterReadingHeat property.</param>
        /// <param name="meterReadingWater">Initial value of the MeterReadingWater property.</param>
        /// <param name="contractHeatByLoading">Initial value of the ContractHeatByLoading property.</param>
        /// <param name="contractPeopleCount">Initial value of the ContractPeopleCount property.</param>
        /// <param name="contractHotWaterByNorm">Initial value of the ContractHotWaterByNorm property.</param>
        /// <param name="contractTotalHeatConsumption">Initial value of the ContractTotalHeatConsumption property.</param>
        /// <param name="normativeCalculationArea">Initial value of the NormativeCalculationArea property.</param>
        /// <param name="normativeEstimateConsumptionHeat">Initial value of the NormativeEstimateConsumptionHeat property.</param>
        /// <param name="normativConsumptionHeatByTotalArea">Initial value of the NormativConsumptionHeatByTotalArea property.</param>
        /// <param name="normativeConsumptionHeatByCalculationArea">Initial value of the NormativeConsumptionHeatByCalculationArea property.</param>
        public static WholeTable CreateWholeTable(global::System.Int32 id, global::System.String buildingName, global::System.String buildingDescription, global::System.Double buildingStandartOfHeat, global::System.Double buildingTotalArea, global::System.String heatSupplierName, global::System.String heatSupplierDescription, global::System.Double clearingRequirements, global::System.Double clearingCalculationHot, global::System.Double clearingCalculationByBuhgaltery, global::System.Double meterReadingHeat, global::System.Double meterReadingWater, global::System.Double contractHeatByLoading, global::System.Double contractPeopleCount, global::System.Double contractHotWaterByNorm, global::System.Double contractTotalHeatConsumption, global::System.Double normativeCalculationArea, global::System.Double normativeEstimateConsumptionHeat, global::System.Double normativConsumptionHeatByTotalArea, global::System.Double normativeConsumptionHeatByCalculationArea)
        {
            WholeTable wholeTable = new WholeTable();
            wholeTable.Id = id;
            wholeTable.BuildingName = buildingName;
            wholeTable.BuildingDescription = buildingDescription;
            wholeTable.BuildingStandartOfHeat = buildingStandartOfHeat;
            wholeTable.BuildingTotalArea = buildingTotalArea;
            wholeTable.HeatSupplierName = heatSupplierName;
            wholeTable.HeatSupplierDescription = heatSupplierDescription;
            wholeTable.ClearingRequirements = clearingRequirements;
            wholeTable.ClearingCalculationHot = clearingCalculationHot;
            wholeTable.ClearingCalculationByBuhgaltery = clearingCalculationByBuhgaltery;
            wholeTable.MeterReadingHeat = meterReadingHeat;
            wholeTable.MeterReadingWater = meterReadingWater;
            wholeTable.ContractHeatByLoading = contractHeatByLoading;
            wholeTable.ContractPeopleCount = contractPeopleCount;
            wholeTable.ContractHotWaterByNorm = contractHotWaterByNorm;
            wholeTable.ContractTotalHeatConsumption = contractTotalHeatConsumption;
            wholeTable.NormativeCalculationArea = normativeCalculationArea;
            wholeTable.NormativeEstimateConsumptionHeat = normativeEstimateConsumptionHeat;
            wholeTable.NormativConsumptionHeatByTotalArea = normativConsumptionHeatByTotalArea;
            wholeTable.NormativeConsumptionHeatByCalculationArea = normativeConsumptionHeatByCalculationArea;
            return wholeTable;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String BuildingName
        {
            get
            {
                return _BuildingName;
            }
            set
            {
                OnBuildingNameChanging(value);
                ReportPropertyChanging("BuildingName");
                _BuildingName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("BuildingName");
                OnBuildingNameChanged();
            }
        }
        private global::System.String _BuildingName;
        partial void OnBuildingNameChanging(global::System.String value);
        partial void OnBuildingNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String BuildingDescription
        {
            get
            {
                return _BuildingDescription;
            }
            set
            {
                OnBuildingDescriptionChanging(value);
                ReportPropertyChanging("BuildingDescription");
                _BuildingDescription = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("BuildingDescription");
                OnBuildingDescriptionChanged();
            }
        }
        private global::System.String _BuildingDescription;
        partial void OnBuildingDescriptionChanging(global::System.String value);
        partial void OnBuildingDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double BuildingStandartOfHeat
        {
            get
            {
                return _BuildingStandartOfHeat;
            }
            set
            {
                OnBuildingStandartOfHeatChanging(value);
                ReportPropertyChanging("BuildingStandartOfHeat");
                _BuildingStandartOfHeat = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("BuildingStandartOfHeat");
                OnBuildingStandartOfHeatChanged();
            }
        }
        private global::System.Double _BuildingStandartOfHeat;
        partial void OnBuildingStandartOfHeatChanging(global::System.Double value);
        partial void OnBuildingStandartOfHeatChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double BuildingTotalArea
        {
            get
            {
                return _BuildingTotalArea;
            }
            set
            {
                OnBuildingTotalAreaChanging(value);
                ReportPropertyChanging("BuildingTotalArea");
                _BuildingTotalArea = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("BuildingTotalArea");
                OnBuildingTotalAreaChanged();
            }
        }
        private global::System.Double _BuildingTotalArea;
        partial void OnBuildingTotalAreaChanging(global::System.Double value);
        partial void OnBuildingTotalAreaChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String HeatSupplierName
        {
            get
            {
                return _HeatSupplierName;
            }
            set
            {
                OnHeatSupplierNameChanging(value);
                ReportPropertyChanging("HeatSupplierName");
                _HeatSupplierName = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("HeatSupplierName");
                OnHeatSupplierNameChanged();
            }
        }
        private global::System.String _HeatSupplierName;
        partial void OnHeatSupplierNameChanging(global::System.String value);
        partial void OnHeatSupplierNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String HeatSupplierDescription
        {
            get
            {
                return _HeatSupplierDescription;
            }
            set
            {
                OnHeatSupplierDescriptionChanging(value);
                ReportPropertyChanging("HeatSupplierDescription");
                _HeatSupplierDescription = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("HeatSupplierDescription");
                OnHeatSupplierDescriptionChanged();
            }
        }
        private global::System.String _HeatSupplierDescription;
        partial void OnHeatSupplierDescriptionChanging(global::System.String value);
        partial void OnHeatSupplierDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DateTimeIntervalStartDate
        {
            get
            {
                return _DateTimeIntervalStartDate;
            }
            set
            {
                OnDateTimeIntervalStartDateChanging(value);
                ReportPropertyChanging("DateTimeIntervalStartDate");
                _DateTimeIntervalStartDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateTimeIntervalStartDate");
                OnDateTimeIntervalStartDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _DateTimeIntervalStartDate;
        partial void OnDateTimeIntervalStartDateChanging(Nullable<global::System.DateTime> value);
        partial void OnDateTimeIntervalStartDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.DateTime> DateTimeIntervalEndDate
        {
            get
            {
                return _DateTimeIntervalEndDate;
            }
            set
            {
                OnDateTimeIntervalEndDateChanging(value);
                ReportPropertyChanging("DateTimeIntervalEndDate");
                _DateTimeIntervalEndDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("DateTimeIntervalEndDate");
                OnDateTimeIntervalEndDateChanged();
            }
        }
        private Nullable<global::System.DateTime> _DateTimeIntervalEndDate;
        partial void OnDateTimeIntervalEndDateChanging(Nullable<global::System.DateTime> value);
        partial void OnDateTimeIntervalEndDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String DateTimeIntervalName
        {
            get
            {
                return _DateTimeIntervalName;
            }
            set
            {
                OnDateTimeIntervalNameChanging(value);
                ReportPropertyChanging("DateTimeIntervalName");
                _DateTimeIntervalName = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("DateTimeIntervalName");
                OnDateTimeIntervalNameChanged();
            }
        }
        private global::System.String _DateTimeIntervalName;
        partial void OnDateTimeIntervalNameChanging(global::System.String value);
        partial void OnDateTimeIntervalNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double ClearingRequirements
        {
            get
            {
                return _ClearingRequirements;
            }
            set
            {
                OnClearingRequirementsChanging(value);
                ReportPropertyChanging("ClearingRequirements");
                _ClearingRequirements = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ClearingRequirements");
                OnClearingRequirementsChanged();
            }
        }
        private global::System.Double _ClearingRequirements;
        partial void OnClearingRequirementsChanging(global::System.Double value);
        partial void OnClearingRequirementsChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double ClearingCalculationHot
        {
            get
            {
                return _ClearingCalculationHot;
            }
            set
            {
                OnClearingCalculationHotChanging(value);
                ReportPropertyChanging("ClearingCalculationHot");
                _ClearingCalculationHot = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ClearingCalculationHot");
                OnClearingCalculationHotChanged();
            }
        }
        private global::System.Double _ClearingCalculationHot;
        partial void OnClearingCalculationHotChanging(global::System.Double value);
        partial void OnClearingCalculationHotChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double ClearingCalculationByBuhgaltery
        {
            get
            {
                return _ClearingCalculationByBuhgaltery;
            }
            set
            {
                OnClearingCalculationByBuhgalteryChanging(value);
                ReportPropertyChanging("ClearingCalculationByBuhgaltery");
                _ClearingCalculationByBuhgaltery = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ClearingCalculationByBuhgaltery");
                OnClearingCalculationByBuhgalteryChanged();
            }
        }
        private global::System.Double _ClearingCalculationByBuhgaltery;
        partial void OnClearingCalculationByBuhgalteryChanging(global::System.Double value);
        partial void OnClearingCalculationByBuhgalteryChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double MeterReadingHeat
        {
            get
            {
                return _MeterReadingHeat;
            }
            set
            {
                OnMeterReadingHeatChanging(value);
                ReportPropertyChanging("MeterReadingHeat");
                _MeterReadingHeat = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MeterReadingHeat");
                OnMeterReadingHeatChanged();
            }
        }
        private global::System.Double _MeterReadingHeat;
        partial void OnMeterReadingHeatChanging(global::System.Double value);
        partial void OnMeterReadingHeatChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double MeterReadingWater
        {
            get
            {
                return _MeterReadingWater;
            }
            set
            {
                OnMeterReadingWaterChanging(value);
                ReportPropertyChanging("MeterReadingWater");
                _MeterReadingWater = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("MeterReadingWater");
                OnMeterReadingWaterChanged();
            }
        }
        private global::System.Double _MeterReadingWater;
        partial void OnMeterReadingWaterChanging(global::System.Double value);
        partial void OnMeterReadingWaterChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double ContractHeatByLoading
        {
            get
            {
                return _ContractHeatByLoading;
            }
            set
            {
                OnContractHeatByLoadingChanging(value);
                ReportPropertyChanging("ContractHeatByLoading");
                _ContractHeatByLoading = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ContractHeatByLoading");
                OnContractHeatByLoadingChanged();
            }
        }
        private global::System.Double _ContractHeatByLoading;
        partial void OnContractHeatByLoadingChanging(global::System.Double value);
        partial void OnContractHeatByLoadingChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double ContractPeopleCount
        {
            get
            {
                return _ContractPeopleCount;
            }
            set
            {
                OnContractPeopleCountChanging(value);
                ReportPropertyChanging("ContractPeopleCount");
                _ContractPeopleCount = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ContractPeopleCount");
                OnContractPeopleCountChanged();
            }
        }
        private global::System.Double _ContractPeopleCount;
        partial void OnContractPeopleCountChanging(global::System.Double value);
        partial void OnContractPeopleCountChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double ContractHotWaterByNorm
        {
            get
            {
                return _ContractHotWaterByNorm;
            }
            set
            {
                OnContractHotWaterByNormChanging(value);
                ReportPropertyChanging("ContractHotWaterByNorm");
                _ContractHotWaterByNorm = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ContractHotWaterByNorm");
                OnContractHotWaterByNormChanged();
            }
        }
        private global::System.Double _ContractHotWaterByNorm;
        partial void OnContractHotWaterByNormChanging(global::System.Double value);
        partial void OnContractHotWaterByNormChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double ContractTotalHeatConsumption
        {
            get
            {
                return _ContractTotalHeatConsumption;
            }
            set
            {
                OnContractTotalHeatConsumptionChanging(value);
                ReportPropertyChanging("ContractTotalHeatConsumption");
                _ContractTotalHeatConsumption = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ContractTotalHeatConsumption");
                OnContractTotalHeatConsumptionChanged();
            }
        }
        private global::System.Double _ContractTotalHeatConsumption;
        partial void OnContractTotalHeatConsumptionChanging(global::System.Double value);
        partial void OnContractTotalHeatConsumptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double NormativeCalculationArea
        {
            get
            {
                return _NormativeCalculationArea;
            }
            set
            {
                OnNormativeCalculationAreaChanging(value);
                ReportPropertyChanging("NormativeCalculationArea");
                _NormativeCalculationArea = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("NormativeCalculationArea");
                OnNormativeCalculationAreaChanged();
            }
        }
        private global::System.Double _NormativeCalculationArea;
        partial void OnNormativeCalculationAreaChanging(global::System.Double value);
        partial void OnNormativeCalculationAreaChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double NormativeEstimateConsumptionHeat
        {
            get
            {
                return _NormativeEstimateConsumptionHeat;
            }
            set
            {
                OnNormativeEstimateConsumptionHeatChanging(value);
                ReportPropertyChanging("NormativeEstimateConsumptionHeat");
                _NormativeEstimateConsumptionHeat = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("NormativeEstimateConsumptionHeat");
                OnNormativeEstimateConsumptionHeatChanged();
            }
        }
        private global::System.Double _NormativeEstimateConsumptionHeat;
        partial void OnNormativeEstimateConsumptionHeatChanging(global::System.Double value);
        partial void OnNormativeEstimateConsumptionHeatChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double NormativConsumptionHeatByTotalArea
        {
            get
            {
                return _NormativConsumptionHeatByTotalArea;
            }
            set
            {
                OnNormativConsumptionHeatByTotalAreaChanging(value);
                ReportPropertyChanging("NormativConsumptionHeatByTotalArea");
                _NormativConsumptionHeatByTotalArea = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("NormativConsumptionHeatByTotalArea");
                OnNormativConsumptionHeatByTotalAreaChanged();
            }
        }
        private global::System.Double _NormativConsumptionHeatByTotalArea;
        partial void OnNormativConsumptionHeatByTotalAreaChanging(global::System.Double value);
        partial void OnNormativConsumptionHeatByTotalAreaChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double NormativeConsumptionHeatByCalculationArea
        {
            get
            {
                return _NormativeConsumptionHeatByCalculationArea;
            }
            set
            {
                OnNormativeConsumptionHeatByCalculationAreaChanging(value);
                ReportPropertyChanging("NormativeConsumptionHeatByCalculationArea");
                _NormativeConsumptionHeatByCalculationArea = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("NormativeConsumptionHeatByCalculationArea");
                OnNormativeConsumptionHeatByCalculationAreaChanged();
            }
        }
        private global::System.Double _NormativeConsumptionHeatByCalculationArea;
        partial void OnNormativeConsumptionHeatByCalculationAreaChanging(global::System.Double value);
        partial void OnNormativeConsumptionHeatByCalculationAreaChanged();

        #endregion
    
    }

    #endregion
    
}
