//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM Relationship Metadata

[assembly: EdmRelationshipAttribute("MCDatabaseModel", "BuildingsContractConsumptionHeat", "Buildings", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Repository.Building), "ContractConsumptionHeat", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Repository.ContractConsumptionHeat), true)]
[assembly: EdmRelationshipAttribute("MCDatabaseModel", "BuildingsNormativeCalculation", "Buildings", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Repository.Building), "NormativeCalculation", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Repository.NormativeCalculations), true)]
[assembly: EdmRelationshipAttribute("MCDatabaseModel", "ContractConsumptionHeatDateTimeImtervals", "ContractConsumptionHeat", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Repository.ContractConsumptionHeat), "DateTimeImtervals", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Repository.DateTimeImtervals))]
[assembly: EdmRelationshipAttribute("MCDatabaseModel", "NormativeCalculationDateTimeImtervals", "NormativeCalculation", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Repository.NormativeCalculations), "DateTimeImtervals", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Repository.DateTimeImtervals))]
[assembly: EdmRelationshipAttribute("MCDatabaseModel", "BuildingsMeterReadings", "Buildings", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Repository.Building), "MeterReadings", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Repository.MeterReadings), true)]
[assembly: EdmRelationshipAttribute("MCDatabaseModel", "MeterReadingsDateTimeImtervals", "MeterReadings", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Repository.MeterReadings), "DateTimeImtervals", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Repository.DateTimeImtervals))]
[assembly: EdmRelationshipAttribute("MCDatabaseModel", "BuildingsClearing", "Buildings", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Repository.Building), "Clearing", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Repository.Clearing), true)]
[assembly: EdmRelationshipAttribute("MCDatabaseModel", "DateTimeImtervalsClearing", "DateTimeImtervals", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Repository.DateTimeImtervals), "Clearing", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Repository.Clearing))]
[assembly: EdmRelationshipAttribute("MCDatabaseModel", "BuildingsHeatSupplier", "Buildings", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Repository.Building), "HeatSupplier", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Repository.HeatSupplier))]
[assembly: EdmRelationshipAttribute("MCDatabaseModel", "DateTimeImtervalsHeatSupplier", "DateTimeImtervals", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Repository.DateTimeImtervals), "HeatSupplier", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Repository.HeatSupplier), true)]
[assembly: EdmRelationshipAttribute("MCDatabaseModel", "ContractConsumptionHeatThermometerReading", "ContractConsumptionHeat", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Repository.ContractConsumptionHeat), "ThermometerReading", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Repository.ThermometerReading))]

#endregion

namespace Repository
{
    #region Contexts
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    public partial class MCDatabaseModelContainer : ObjectContext
    {
        #region Constructors
    
        /// <summary>
        /// Initializes a new MCDatabaseModelContainer object using the connection string found in the 'MCDatabaseModelContainer' section of the application configuration file.
        /// </summary>
        public MCDatabaseModelContainer() : base("name=MCDatabaseModelContainer", "MCDatabaseModelContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new MCDatabaseModelContainer object.
        /// </summary>
        public MCDatabaseModelContainer(string connectionString) : base(connectionString, "MCDatabaseModelContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Initialize a new MCDatabaseModelContainer object.
        /// </summary>
        public MCDatabaseModelContainer(EntityConnection connection) : base(connection, "MCDatabaseModelContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Partial Methods
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Building> Buildings
        {
            get
            {
                if ((_Buildings == null))
                {
                    _Buildings = base.CreateObjectSet<Building>("Buildings");
                }
                return _Buildings;
            }
        }
        private ObjectSet<Building> _Buildings;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<DateTimeImtervals> DateTimeImtervals
        {
            get
            {
                if ((_DateTimeImtervals == null))
                {
                    _DateTimeImtervals = base.CreateObjectSet<DateTimeImtervals>("DateTimeImtervals");
                }
                return _DateTimeImtervals;
            }
        }
        private ObjectSet<DateTimeImtervals> _DateTimeImtervals;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<NormativeCalculations> NormativeCalculations
        {
            get
            {
                if ((_NormativeCalculations == null))
                {
                    _NormativeCalculations = base.CreateObjectSet<NormativeCalculations>("NormativeCalculations");
                }
                return _NormativeCalculations;
            }
        }
        private ObjectSet<NormativeCalculations> _NormativeCalculations;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ContractConsumptionHeat> ContractConsumptionHeatTable
        {
            get
            {
                if ((_ContractConsumptionHeatTable == null))
                {
                    _ContractConsumptionHeatTable = base.CreateObjectSet<ContractConsumptionHeat>("ContractConsumptionHeatTable");
                }
                return _ContractConsumptionHeatTable;
            }
        }
        private ObjectSet<ContractConsumptionHeat> _ContractConsumptionHeatTable;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<MeterReadings> MeterReadingsTable
        {
            get
            {
                if ((_MeterReadingsTable == null))
                {
                    _MeterReadingsTable = base.CreateObjectSet<MeterReadings>("MeterReadingsTable");
                }
                return _MeterReadingsTable;
            }
        }
        private ObjectSet<MeterReadings> _MeterReadingsTable;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<Clearing> ClearingTable
        {
            get
            {
                if ((_ClearingTable == null))
                {
                    _ClearingTable = base.CreateObjectSet<Clearing>("ClearingTable");
                }
                return _ClearingTable;
            }
        }
        private ObjectSet<Clearing> _ClearingTable;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<HeatSupplier> HeatSuppliers
        {
            get
            {
                if ((_HeatSuppliers == null))
                {
                    _HeatSuppliers = base.CreateObjectSet<HeatSupplier>("HeatSuppliers");
                }
                return _HeatSuppliers;
            }
        }
        private ObjectSet<HeatSupplier> _HeatSuppliers;
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        public ObjectSet<ThermometerReading> ThermometerReadings
        {
            get
            {
                if ((_ThermometerReadings == null))
                {
                    _ThermometerReadings = base.CreateObjectSet<ThermometerReading>("ThermometerReadings");
                }
                return _ThermometerReadings;
            }
        }
        private ObjectSet<ThermometerReading> _ThermometerReadings;

        #endregion
        #region AddTo Methods
    
        /// <summary>
        /// Deprecated Method for adding a new object to the Buildings EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToBuildings(Building building)
        {
            base.AddObject("Buildings", building);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the DateTimeImtervals EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToDateTimeImtervals(DateTimeImtervals dateTimeImtervals)
        {
            base.AddObject("DateTimeImtervals", dateTimeImtervals);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the NormativeCalculations EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToNormativeCalculations(NormativeCalculations normativeCalculations)
        {
            base.AddObject("NormativeCalculations", normativeCalculations);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ContractConsumptionHeatTable EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToContractConsumptionHeatTable(ContractConsumptionHeat contractConsumptionHeat)
        {
            base.AddObject("ContractConsumptionHeatTable", contractConsumptionHeat);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the MeterReadingsTable EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToMeterReadingsTable(MeterReadings meterReadings)
        {
            base.AddObject("MeterReadingsTable", meterReadings);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ClearingTable EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToClearingTable(Clearing clearing)
        {
            base.AddObject("ClearingTable", clearing);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the HeatSuppliers EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToHeatSuppliers(HeatSupplier heatSupplier)
        {
            base.AddObject("HeatSuppliers", heatSupplier);
        }
    
        /// <summary>
        /// Deprecated Method for adding a new object to the ThermometerReadings EntitySet. Consider using the .Add method of the associated ObjectSet&lt;T&gt; property instead.
        /// </summary>
        public void AddToThermometerReadings(ThermometerReading thermometerReading)
        {
            base.AddObject("ThermometerReadings", thermometerReading);
        }

        #endregion
    }
    

    #endregion
    
    #region Entities
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MCDatabaseModel", Name="Building")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Building : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Building object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="standartOfHeat">Initial value of the StandartOfHeat property.</param>
        /// <param name="totalArea">Initial value of the TotalArea property.</param>
        public static Building CreateBuilding(global::System.Int32 id, global::System.String name, global::System.Double standartOfHeat, global::System.String totalArea)
        {
            Building building = new Building();
            building.Id = id;
            building.Name = name;
            building.StandartOfHeat = standartOfHeat;
            building.TotalArea = totalArea;
            return building;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double StandartOfHeat
        {
            get
            {
                return _StandartOfHeat;
            }
            set
            {
                OnStandartOfHeatChanging(value);
                ReportPropertyChanging("StandartOfHeat");
                _StandartOfHeat = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StandartOfHeat");
                OnStandartOfHeatChanged();
            }
        }
        private global::System.Double _StandartOfHeat;
        partial void OnStandartOfHeatChanging(global::System.Double value);
        partial void OnStandartOfHeatChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TotalArea
        {
            get
            {
                return _TotalArea;
            }
            set
            {
                OnTotalAreaChanging(value);
                ReportPropertyChanging("TotalArea");
                _TotalArea = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("TotalArea");
                OnTotalAreaChanged();
            }
        }
        private global::System.String _TotalArea;
        partial void OnTotalAreaChanging(global::System.String value);
        partial void OnTotalAreaChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "BuildingsContractConsumptionHeat", "ContractConsumptionHeat")]
        public EntityCollection<ContractConsumptionHeat> ContractConsumptionHeat
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ContractConsumptionHeat>("MCDatabaseModel.BuildingsContractConsumptionHeat", "ContractConsumptionHeat");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ContractConsumptionHeat>("MCDatabaseModel.BuildingsContractConsumptionHeat", "ContractConsumptionHeat", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "BuildingsNormativeCalculation", "NormativeCalculation")]
        public EntityCollection<NormativeCalculations> NormativeCalculation
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<NormativeCalculations>("MCDatabaseModel.BuildingsNormativeCalculation", "NormativeCalculation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<NormativeCalculations>("MCDatabaseModel.BuildingsNormativeCalculation", "NormativeCalculation", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "BuildingsMeterReadings", "MeterReadings")]
        public EntityCollection<MeterReadings> MeterReadings
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<MeterReadings>("MCDatabaseModel.BuildingsMeterReadings", "MeterReadings");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<MeterReadings>("MCDatabaseModel.BuildingsMeterReadings", "MeterReadings", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "BuildingsClearing", "Clearing")]
        public EntityCollection<Clearing> Clearing
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Clearing>("MCDatabaseModel.BuildingsClearing", "Clearing");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Clearing>("MCDatabaseModel.BuildingsClearing", "Clearing", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "BuildingsHeatSupplier", "HeatSupplier")]
        public HeatSupplier HeatSupplier
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<HeatSupplier>("MCDatabaseModel.BuildingsHeatSupplier", "HeatSupplier").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<HeatSupplier>("MCDatabaseModel.BuildingsHeatSupplier", "HeatSupplier").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<HeatSupplier> HeatSupplierReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<HeatSupplier>("MCDatabaseModel.BuildingsHeatSupplier", "HeatSupplier");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<HeatSupplier>("MCDatabaseModel.BuildingsHeatSupplier", "HeatSupplier", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MCDatabaseModel", Name="Clearing")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Clearing : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new Clearing object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="requirements">Initial value of the Requirements property.</param>
        /// <param name="calculationHotWater">Initial value of the CalculationHotWater property.</param>
        /// <param name="calculationHot">Initial value of the CalculationHot property.</param>
        /// <param name="buildingsId">Initial value of the BuildingsId property.</param>
        public static Clearing CreateClearing(global::System.Int32 id, global::System.Double requirements, global::System.Double calculationHotWater, global::System.Double calculationHot, global::System.Int32 buildingsId)
        {
            Clearing clearing = new Clearing();
            clearing.Id = id;
            clearing.Requirements = requirements;
            clearing.CalculationHotWater = calculationHotWater;
            clearing.CalculationHot = calculationHot;
            clearing.BuildingsId = buildingsId;
            return clearing;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double Requirements
        {
            get
            {
                return _Requirements;
            }
            set
            {
                OnRequirementsChanging(value);
                ReportPropertyChanging("Requirements");
                _Requirements = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("Requirements");
                OnRequirementsChanged();
            }
        }
        private global::System.Double _Requirements;
        partial void OnRequirementsChanging(global::System.Double value);
        partial void OnRequirementsChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double CalculationHotWater
        {
            get
            {
                return _CalculationHotWater;
            }
            set
            {
                OnCalculationHotWaterChanging(value);
                ReportPropertyChanging("CalculationHotWater");
                _CalculationHotWater = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CalculationHotWater");
                OnCalculationHotWaterChanged();
            }
        }
        private global::System.Double _CalculationHotWater;
        partial void OnCalculationHotWaterChanging(global::System.Double value);
        partial void OnCalculationHotWaterChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double CalculationHot
        {
            get
            {
                return _CalculationHot;
            }
            set
            {
                OnCalculationHotChanging(value);
                ReportPropertyChanging("CalculationHot");
                _CalculationHot = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CalculationHot");
                OnCalculationHotChanged();
            }
        }
        private global::System.Double _CalculationHot;
        partial void OnCalculationHotChanging(global::System.Double value);
        partial void OnCalculationHotChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 BuildingsId
        {
            get
            {
                return _BuildingsId;
            }
            set
            {
                OnBuildingsIdChanging(value);
                ReportPropertyChanging("BuildingsId");
                _BuildingsId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("BuildingsId");
                OnBuildingsIdChanged();
            }
        }
        private global::System.Int32 _BuildingsId;
        partial void OnBuildingsIdChanging(global::System.Int32 value);
        partial void OnBuildingsIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "BuildingsClearing", "Buildings")]
        public Building Buildings
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Building>("MCDatabaseModel.BuildingsClearing", "Buildings").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Building>("MCDatabaseModel.BuildingsClearing", "Buildings").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Building> BuildingsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Building>("MCDatabaseModel.BuildingsClearing", "Buildings");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Building>("MCDatabaseModel.BuildingsClearing", "Buildings", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "DateTimeImtervalsClearing", "DateTimeImtervals")]
        public DateTimeImtervals DateTimeImtervals
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DateTimeImtervals>("MCDatabaseModel.DateTimeImtervalsClearing", "DateTimeImtervals").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DateTimeImtervals>("MCDatabaseModel.DateTimeImtervalsClearing", "DateTimeImtervals").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<DateTimeImtervals> DateTimeImtervalsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DateTimeImtervals>("MCDatabaseModel.DateTimeImtervalsClearing", "DateTimeImtervals");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<DateTimeImtervals>("MCDatabaseModel.DateTimeImtervalsClearing", "DateTimeImtervals", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MCDatabaseModel", Name="ContractConsumptionHeat")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ContractConsumptionHeat : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ContractConsumptionHeat object.
        /// </summary>
        /// <param name="id">Initial value of the ID property.</param>
        /// <param name="heatByLoading">Initial value of the HeatByLoading property.</param>
        /// <param name="peopleCount">Initial value of the PeopleCount property.</param>
        /// <param name="hotWaterByNorm">Initial value of the HotWaterByNorm property.</param>
        /// <param name="totalHeatConsumption">Initial value of the TotalHeatConsumption property.</param>
        /// <param name="buildingsId">Initial value of the BuildingsId property.</param>
        public static ContractConsumptionHeat CreateContractConsumptionHeat(global::System.Int32 id, global::System.Double heatByLoading, global::System.Int32 peopleCount, global::System.Double hotWaterByNorm, global::System.Double totalHeatConsumption, global::System.Int32 buildingsId)
        {
            ContractConsumptionHeat contractConsumptionHeat = new ContractConsumptionHeat();
            contractConsumptionHeat.ID = id;
            contractConsumptionHeat.HeatByLoading = heatByLoading;
            contractConsumptionHeat.PeopleCount = peopleCount;
            contractConsumptionHeat.HotWaterByNorm = hotWaterByNorm;
            contractConsumptionHeat.TotalHeatConsumption = totalHeatConsumption;
            contractConsumptionHeat.BuildingsId = buildingsId;
            return contractConsumptionHeat;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double HeatByLoading
        {
            get
            {
                return _HeatByLoading;
            }
            set
            {
                OnHeatByLoadingChanging(value);
                ReportPropertyChanging("HeatByLoading");
                _HeatByLoading = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("HeatByLoading");
                OnHeatByLoadingChanged();
            }
        }
        private global::System.Double _HeatByLoading;
        partial void OnHeatByLoadingChanging(global::System.Double value);
        partial void OnHeatByLoadingChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 PeopleCount
        {
            get
            {
                return _PeopleCount;
            }
            set
            {
                OnPeopleCountChanging(value);
                ReportPropertyChanging("PeopleCount");
                _PeopleCount = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PeopleCount");
                OnPeopleCountChanged();
            }
        }
        private global::System.Int32 _PeopleCount;
        partial void OnPeopleCountChanging(global::System.Int32 value);
        partial void OnPeopleCountChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double HotWaterByNorm
        {
            get
            {
                return _HotWaterByNorm;
            }
            set
            {
                OnHotWaterByNormChanging(value);
                ReportPropertyChanging("HotWaterByNorm");
                _HotWaterByNorm = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("HotWaterByNorm");
                OnHotWaterByNormChanged();
            }
        }
        private global::System.Double _HotWaterByNorm;
        partial void OnHotWaterByNormChanging(global::System.Double value);
        partial void OnHotWaterByNormChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double TotalHeatConsumption
        {
            get
            {
                return _TotalHeatConsumption;
            }
            set
            {
                OnTotalHeatConsumptionChanging(value);
                ReportPropertyChanging("TotalHeatConsumption");
                _TotalHeatConsumption = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TotalHeatConsumption");
                OnTotalHeatConsumptionChanged();
            }
        }
        private global::System.Double _TotalHeatConsumption;
        partial void OnTotalHeatConsumptionChanging(global::System.Double value);
        partial void OnTotalHeatConsumptionChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 BuildingsId
        {
            get
            {
                return _BuildingsId;
            }
            set
            {
                OnBuildingsIdChanging(value);
                ReportPropertyChanging("BuildingsId");
                _BuildingsId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("BuildingsId");
                OnBuildingsIdChanged();
            }
        }
        private global::System.Int32 _BuildingsId;
        partial void OnBuildingsIdChanging(global::System.Int32 value);
        partial void OnBuildingsIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "BuildingsContractConsumptionHeat", "Buildings")]
        public Building Buildings
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Building>("MCDatabaseModel.BuildingsContractConsumptionHeat", "Buildings").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Building>("MCDatabaseModel.BuildingsContractConsumptionHeat", "Buildings").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Building> BuildingsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Building>("MCDatabaseModel.BuildingsContractConsumptionHeat", "Buildings");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Building>("MCDatabaseModel.BuildingsContractConsumptionHeat", "Buildings", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "ContractConsumptionHeatDateTimeImtervals", "DateTimeImtervals")]
        public DateTimeImtervals DateTimeImtervals
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DateTimeImtervals>("MCDatabaseModel.ContractConsumptionHeatDateTimeImtervals", "DateTimeImtervals").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DateTimeImtervals>("MCDatabaseModel.ContractConsumptionHeatDateTimeImtervals", "DateTimeImtervals").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<DateTimeImtervals> DateTimeImtervalsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DateTimeImtervals>("MCDatabaseModel.ContractConsumptionHeatDateTimeImtervals", "DateTimeImtervals");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<DateTimeImtervals>("MCDatabaseModel.ContractConsumptionHeatDateTimeImtervals", "DateTimeImtervals", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "ContractConsumptionHeatThermometerReading", "ThermometerReading")]
        public ThermometerReading ThermometerReading
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ThermometerReading>("MCDatabaseModel.ContractConsumptionHeatThermometerReading", "ThermometerReading").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ThermometerReading>("MCDatabaseModel.ContractConsumptionHeatThermometerReading", "ThermometerReading").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ThermometerReading> ThermometerReadingReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ThermometerReading>("MCDatabaseModel.ContractConsumptionHeatThermometerReading", "ThermometerReading");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ThermometerReading>("MCDatabaseModel.ContractConsumptionHeatThermometerReading", "ThermometerReading", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MCDatabaseModel", Name="DateTimeImtervals")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class DateTimeImtervals : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new DateTimeImtervals object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="startDate">Initial value of the StartDate property.</param>
        /// <param name="endDate">Initial value of the EndDate property.</param>
        /// <param name="heatSupplierId">Initial value of the HeatSupplierId property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        public static DateTimeImtervals CreateDateTimeImtervals(global::System.Int32 id, global::System.DateTime startDate, global::System.DateTime endDate, global::System.Int32 heatSupplierId, global::System.String name)
        {
            DateTimeImtervals dateTimeImtervals = new DateTimeImtervals();
            dateTimeImtervals.Id = id;
            dateTimeImtervals.StartDate = startDate;
            dateTimeImtervals.EndDate = endDate;
            dateTimeImtervals.HeatSupplierId = heatSupplierId;
            dateTimeImtervals.Name = name;
            return dateTimeImtervals;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime StartDate
        {
            get
            {
                return _StartDate;
            }
            set
            {
                OnStartDateChanging(value);
                ReportPropertyChanging("StartDate");
                _StartDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("StartDate");
                OnStartDateChanged();
            }
        }
        private global::System.DateTime _StartDate;
        partial void OnStartDateChanging(global::System.DateTime value);
        partial void OnStartDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime EndDate
        {
            get
            {
                return _EndDate;
            }
            set
            {
                OnEndDateChanging(value);
                ReportPropertyChanging("EndDate");
                _EndDate = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EndDate");
                OnEndDateChanged();
            }
        }
        private global::System.DateTime _EndDate;
        partial void OnEndDateChanging(global::System.DateTime value);
        partial void OnEndDateChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 HeatSupplierId
        {
            get
            {
                return _HeatSupplierId;
            }
            set
            {
                OnHeatSupplierIdChanging(value);
                ReportPropertyChanging("HeatSupplierId");
                _HeatSupplierId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("HeatSupplierId");
                OnHeatSupplierIdChanged();
            }
        }
        private global::System.Int32 _HeatSupplierId;
        partial void OnHeatSupplierIdChanging(global::System.Int32 value);
        partial void OnHeatSupplierIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "ContractConsumptionHeatDateTimeImtervals", "ContractConsumptionHeat")]
        public ContractConsumptionHeat ContractConsumptionHeat
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ContractConsumptionHeat>("MCDatabaseModel.ContractConsumptionHeatDateTimeImtervals", "ContractConsumptionHeat").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ContractConsumptionHeat>("MCDatabaseModel.ContractConsumptionHeatDateTimeImtervals", "ContractConsumptionHeat").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ContractConsumptionHeat> ContractConsumptionHeatReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ContractConsumptionHeat>("MCDatabaseModel.ContractConsumptionHeatDateTimeImtervals", "ContractConsumptionHeat");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ContractConsumptionHeat>("MCDatabaseModel.ContractConsumptionHeatDateTimeImtervals", "ContractConsumptionHeat", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "NormativeCalculationDateTimeImtervals", "NormativeCalculation")]
        public NormativeCalculations NormativeCalculation
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<NormativeCalculations>("MCDatabaseModel.NormativeCalculationDateTimeImtervals", "NormativeCalculation").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<NormativeCalculations>("MCDatabaseModel.NormativeCalculationDateTimeImtervals", "NormativeCalculation").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<NormativeCalculations> NormativeCalculationReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<NormativeCalculations>("MCDatabaseModel.NormativeCalculationDateTimeImtervals", "NormativeCalculation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<NormativeCalculations>("MCDatabaseModel.NormativeCalculationDateTimeImtervals", "NormativeCalculation", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "MeterReadingsDateTimeImtervals", "MeterReadings")]
        public MeterReadings MeterReadings
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MeterReadings>("MCDatabaseModel.MeterReadingsDateTimeImtervals", "MeterReadings").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MeterReadings>("MCDatabaseModel.MeterReadingsDateTimeImtervals", "MeterReadings").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<MeterReadings> MeterReadingsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<MeterReadings>("MCDatabaseModel.MeterReadingsDateTimeImtervals", "MeterReadings");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<MeterReadings>("MCDatabaseModel.MeterReadingsDateTimeImtervals", "MeterReadings", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "DateTimeImtervalsClearing", "Clearing")]
        public Clearing Clearing
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Clearing>("MCDatabaseModel.DateTimeImtervalsClearing", "Clearing").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Clearing>("MCDatabaseModel.DateTimeImtervalsClearing", "Clearing").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Clearing> ClearingReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Clearing>("MCDatabaseModel.DateTimeImtervalsClearing", "Clearing");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Clearing>("MCDatabaseModel.DateTimeImtervalsClearing", "Clearing", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "DateTimeImtervalsHeatSupplier", "HeatSupplier")]
        public HeatSupplier HeatSupplier
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<HeatSupplier>("MCDatabaseModel.DateTimeImtervalsHeatSupplier", "HeatSupplier").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<HeatSupplier>("MCDatabaseModel.DateTimeImtervalsHeatSupplier", "HeatSupplier").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<HeatSupplier> HeatSupplierReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<HeatSupplier>("MCDatabaseModel.DateTimeImtervalsHeatSupplier", "HeatSupplier");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<HeatSupplier>("MCDatabaseModel.DateTimeImtervalsHeatSupplier", "HeatSupplier", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MCDatabaseModel", Name="HeatSupplier")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class HeatSupplier : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new HeatSupplier object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="name">Initial value of the Name property.</param>
        /// <param name="description">Initial value of the Description property.</param>
        public static HeatSupplier CreateHeatSupplier(global::System.Int32 id, global::System.String name, global::System.String description)
        {
            HeatSupplier heatSupplier = new HeatSupplier();
            heatSupplier.Id = id;
            heatSupplier.Name = name;
            heatSupplier.Description = description;
            return heatSupplier;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "BuildingsHeatSupplier", "Buildings")]
        public EntityCollection<Building> Buildings
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<Building>("MCDatabaseModel.BuildingsHeatSupplier", "Buildings");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<Building>("MCDatabaseModel.BuildingsHeatSupplier", "Buildings", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "DateTimeImtervalsHeatSupplier", "DateTimeImtervals")]
        public EntityCollection<DateTimeImtervals> DateTimeImtervals
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<DateTimeImtervals>("MCDatabaseModel.DateTimeImtervalsHeatSupplier", "DateTimeImtervals");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<DateTimeImtervals>("MCDatabaseModel.DateTimeImtervalsHeatSupplier", "DateTimeImtervals", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MCDatabaseModel", Name="MeterReadings")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class MeterReadings : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new MeterReadings object.
        /// </summary>
        /// <param name="id">Initial value of the ID property.</param>
        /// <param name="currentHeatMeterReader">Initial value of the CurrentHeatMeterReader property.</param>
        /// <param name="currentWaterHeatReader">Initial value of the CurrentWaterHeatReader property.</param>
        /// <param name="buildingsId">Initial value of the BuildingsId property.</param>
        public static MeterReadings CreateMeterReadings(global::System.Int32 id, global::System.Double currentHeatMeterReader, global::System.Double currentWaterHeatReader, global::System.Int32 buildingsId)
        {
            MeterReadings meterReadings = new MeterReadings();
            meterReadings.ID = id;
            meterReadings.CurrentHeatMeterReader = currentHeatMeterReader;
            meterReadings.CurrentWaterHeatReader = currentWaterHeatReader;
            meterReadings.BuildingsId = buildingsId;
            return meterReadings;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double CurrentHeatMeterReader
        {
            get
            {
                return _CurrentHeatMeterReader;
            }
            set
            {
                OnCurrentHeatMeterReaderChanging(value);
                ReportPropertyChanging("CurrentHeatMeterReader");
                _CurrentHeatMeterReader = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CurrentHeatMeterReader");
                OnCurrentHeatMeterReaderChanged();
            }
        }
        private global::System.Double _CurrentHeatMeterReader;
        partial void OnCurrentHeatMeterReaderChanging(global::System.Double value);
        partial void OnCurrentHeatMeterReaderChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double CurrentWaterHeatReader
        {
            get
            {
                return _CurrentWaterHeatReader;
            }
            set
            {
                OnCurrentWaterHeatReaderChanging(value);
                ReportPropertyChanging("CurrentWaterHeatReader");
                _CurrentWaterHeatReader = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CurrentWaterHeatReader");
                OnCurrentWaterHeatReaderChanged();
            }
        }
        private global::System.Double _CurrentWaterHeatReader;
        partial void OnCurrentWaterHeatReaderChanging(global::System.Double value);
        partial void OnCurrentWaterHeatReaderChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 BuildingsId
        {
            get
            {
                return _BuildingsId;
            }
            set
            {
                OnBuildingsIdChanging(value);
                ReportPropertyChanging("BuildingsId");
                _BuildingsId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("BuildingsId");
                OnBuildingsIdChanged();
            }
        }
        private global::System.Int32 _BuildingsId;
        partial void OnBuildingsIdChanging(global::System.Int32 value);
        partial void OnBuildingsIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "BuildingsMeterReadings", "Buildings")]
        public Building Buildings
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Building>("MCDatabaseModel.BuildingsMeterReadings", "Buildings").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Building>("MCDatabaseModel.BuildingsMeterReadings", "Buildings").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Building> BuildingsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Building>("MCDatabaseModel.BuildingsMeterReadings", "Buildings");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Building>("MCDatabaseModel.BuildingsMeterReadings", "Buildings", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "MeterReadingsDateTimeImtervals", "DateTimeImtervals")]
        public DateTimeImtervals DateTimeImtervals
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DateTimeImtervals>("MCDatabaseModel.MeterReadingsDateTimeImtervals", "DateTimeImtervals").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DateTimeImtervals>("MCDatabaseModel.MeterReadingsDateTimeImtervals", "DateTimeImtervals").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<DateTimeImtervals> DateTimeImtervalsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DateTimeImtervals>("MCDatabaseModel.MeterReadingsDateTimeImtervals", "DateTimeImtervals");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<DateTimeImtervals>("MCDatabaseModel.MeterReadingsDateTimeImtervals", "DateTimeImtervals", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MCDatabaseModel", Name="NormativeCalculations")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class NormativeCalculations : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new NormativeCalculations object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="calculationArea">Initial value of the CalculationArea property.</param>
        /// <param name="estimateConsumptionHeat">Initial value of the EstimateConsumptionHeat property.</param>
        /// <param name="consumptionHeatByTotalArea">Initial value of the ConsumptionHeatByTotalArea property.</param>
        /// <param name="consumptionHeatByCalculationArea">Initial value of the ConsumptionHeatByCalculationArea property.</param>
        /// <param name="buildingsId">Initial value of the BuildingsId property.</param>
        public static NormativeCalculations CreateNormativeCalculations(global::System.Int32 id, global::System.Double calculationArea, global::System.Double estimateConsumptionHeat, global::System.Double consumptionHeatByTotalArea, global::System.Double consumptionHeatByCalculationArea, global::System.Int32 buildingsId)
        {
            NormativeCalculations normativeCalculations = new NormativeCalculations();
            normativeCalculations.Id = id;
            normativeCalculations.CalculationArea = calculationArea;
            normativeCalculations.EstimateConsumptionHeat = estimateConsumptionHeat;
            normativeCalculations.ConsumptionHeatByTotalArea = consumptionHeatByTotalArea;
            normativeCalculations.ConsumptionHeatByCalculationArea = consumptionHeatByCalculationArea;
            normativeCalculations.BuildingsId = buildingsId;
            return normativeCalculations;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double CalculationArea
        {
            get
            {
                return _CalculationArea;
            }
            set
            {
                OnCalculationAreaChanging(value);
                ReportPropertyChanging("CalculationArea");
                _CalculationArea = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("CalculationArea");
                OnCalculationAreaChanged();
            }
        }
        private global::System.Double _CalculationArea;
        partial void OnCalculationAreaChanging(global::System.Double value);
        partial void OnCalculationAreaChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double EstimateConsumptionHeat
        {
            get
            {
                return _EstimateConsumptionHeat;
            }
            set
            {
                OnEstimateConsumptionHeatChanging(value);
                ReportPropertyChanging("EstimateConsumptionHeat");
                _EstimateConsumptionHeat = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("EstimateConsumptionHeat");
                OnEstimateConsumptionHeatChanged();
            }
        }
        private global::System.Double _EstimateConsumptionHeat;
        partial void OnEstimateConsumptionHeatChanging(global::System.Double value);
        partial void OnEstimateConsumptionHeatChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double ConsumptionHeatByTotalArea
        {
            get
            {
                return _ConsumptionHeatByTotalArea;
            }
            set
            {
                OnConsumptionHeatByTotalAreaChanging(value);
                ReportPropertyChanging("ConsumptionHeatByTotalArea");
                _ConsumptionHeatByTotalArea = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ConsumptionHeatByTotalArea");
                OnConsumptionHeatByTotalAreaChanged();
            }
        }
        private global::System.Double _ConsumptionHeatByTotalArea;
        partial void OnConsumptionHeatByTotalAreaChanging(global::System.Double value);
        partial void OnConsumptionHeatByTotalAreaChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Double ConsumptionHeatByCalculationArea
        {
            get
            {
                return _ConsumptionHeatByCalculationArea;
            }
            set
            {
                OnConsumptionHeatByCalculationAreaChanging(value);
                ReportPropertyChanging("ConsumptionHeatByCalculationArea");
                _ConsumptionHeatByCalculationArea = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("ConsumptionHeatByCalculationArea");
                OnConsumptionHeatByCalculationAreaChanged();
            }
        }
        private global::System.Double _ConsumptionHeatByCalculationArea;
        partial void OnConsumptionHeatByCalculationAreaChanging(global::System.Double value);
        partial void OnConsumptionHeatByCalculationAreaChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 BuildingsId
        {
            get
            {
                return _BuildingsId;
            }
            set
            {
                OnBuildingsIdChanging(value);
                ReportPropertyChanging("BuildingsId");
                _BuildingsId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("BuildingsId");
                OnBuildingsIdChanged();
            }
        }
        private global::System.Int32 _BuildingsId;
        partial void OnBuildingsIdChanging(global::System.Int32 value);
        partial void OnBuildingsIdChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "BuildingsNormativeCalculation", "Buildings")]
        public Building Buildings
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Building>("MCDatabaseModel.BuildingsNormativeCalculation", "Buildings").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Building>("MCDatabaseModel.BuildingsNormativeCalculation", "Buildings").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Building> BuildingsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Building>("MCDatabaseModel.BuildingsNormativeCalculation", "Buildings");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Building>("MCDatabaseModel.BuildingsNormativeCalculation", "Buildings", value);
                }
            }
        }
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "NormativeCalculationDateTimeImtervals", "DateTimeImtervals")]
        public DateTimeImtervals DateTimeImtervals
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DateTimeImtervals>("MCDatabaseModel.NormativeCalculationDateTimeImtervals", "DateTimeImtervals").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DateTimeImtervals>("MCDatabaseModel.NormativeCalculationDateTimeImtervals", "DateTimeImtervals").Value = value;
            }
        }
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<DateTimeImtervals> DateTimeImtervalsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DateTimeImtervals>("MCDatabaseModel.NormativeCalculationDateTimeImtervals", "DateTimeImtervals");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<DateTimeImtervals>("MCDatabaseModel.NormativeCalculationDateTimeImtervals", "DateTimeImtervals", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// No Metadata Documentation available.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MCDatabaseModel", Name="ThermometerReading")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ThermometerReading : EntityObject
    {
        #region Factory Method
    
        /// <summary>
        /// Create a new ThermometerReading object.
        /// </summary>
        /// <param name="id">Initial value of the Id property.</param>
        /// <param name="month">Initial value of the Month property.</param>
        /// <param name="year">Initial value of the Year property.</param>
        /// <param name="airTemperature">Initial value of the AirTemperature property.</param>
        public static ThermometerReading CreateThermometerReading(global::System.Int32 id, global::System.String month, global::System.String year, global::System.String airTemperature)
        {
            ThermometerReading thermometerReading = new ThermometerReading();
            thermometerReading.Id = id;
            thermometerReading.Month = month;
            thermometerReading.Year = year;
            thermometerReading.AirTemperature = airTemperature;
            return thermometerReading;
        }

        #endregion
        #region Primitive Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Month
        {
            get
            {
                return _Month;
            }
            set
            {
                OnMonthChanging(value);
                ReportPropertyChanging("Month");
                _Month = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Month");
                OnMonthChanged();
            }
        }
        private global::System.String _Month;
        partial void OnMonthChanging(global::System.String value);
        partial void OnMonthChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Year
        {
            get
            {
                return _Year;
            }
            set
            {
                OnYearChanging(value);
                ReportPropertyChanging("Year");
                _Year = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Year");
                OnYearChanged();
            }
        }
        private global::System.String _Year;
        partial void OnYearChanging(global::System.String value);
        partial void OnYearChanged();
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String AirTemperature
        {
            get
            {
                return _AirTemperature;
            }
            set
            {
                OnAirTemperatureChanging(value);
                ReportPropertyChanging("AirTemperature");
                _AirTemperature = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("AirTemperature");
                OnAirTemperatureChanged();
            }
        }
        private global::System.String _AirTemperature;
        partial void OnAirTemperatureChanging(global::System.String value);
        partial void OnAirTemperatureChanged();

        #endregion
    
        #region Navigation Properties
    
        /// <summary>
        /// No Metadata Documentation available.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "ContractConsumptionHeatThermometerReading", "ContractConsumptionHeat")]
        public EntityCollection<ContractConsumptionHeat> ContractConsumptionHeats
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ContractConsumptionHeat>("MCDatabaseModel.ContractConsumptionHeatThermometerReading", "ContractConsumptionHeat");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ContractConsumptionHeat>("MCDatabaseModel.ContractConsumptionHeatThermometerReading", "ContractConsumptionHeat", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
