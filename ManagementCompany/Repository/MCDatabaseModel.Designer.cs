//------------------------------------------------------------------------------
// <auto-generated>
//    Этот код был создан из шаблона.
//
//    Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//    Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region Метаданные связи EDM

[assembly: EdmRelationshipAttribute("MCDatabaseModel", "BuildingsDateTimeImtervals", "Buildings", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Repository.Buildings), "DateTimeImtervals", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Repository.DateTimeImtervals), true)]
[assembly: EdmRelationshipAttribute("MCDatabaseModel", "BuildingsContractConsumptionHeat", "Buildings", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Repository.Buildings), "ContractConsumptionHeat", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Repository.ContractConsumptionHeat), true)]
[assembly: EdmRelationshipAttribute("MCDatabaseModel", "BuildingsNormativeCalculation", "Buildings", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Repository.Buildings), "NormativeCalculation", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(Repository.NormativeCalculation), true)]
[assembly: EdmRelationshipAttribute("MCDatabaseModel", "ContractConsumptionHeatDateTimeImtervals", "ContractConsumptionHeat", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Repository.ContractConsumptionHeat), "DateTimeImtervals", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Repository.DateTimeImtervals))]
[assembly: EdmRelationshipAttribute("MCDatabaseModel", "NormativeCalculationDateTimeImtervals", "NormativeCalculation", System.Data.Metadata.Edm.RelationshipMultiplicity.ZeroOrOne, typeof(Repository.NormativeCalculation), "DateTimeImtervals", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(Repository.DateTimeImtervals))]

#endregion

namespace Repository
{
    #region Контексты
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    public partial class MCDatabaseModelContainer : ObjectContext
    {
        #region Конструкторы
    
        /// <summary>
        /// Инициализирует новый объект MCDatabaseModelContainer, используя строку соединения из раздела "MCDatabaseModelContainer" файла конфигурации приложения.
        /// </summary>
        public MCDatabaseModelContainer() : base("name=MCDatabaseModelContainer", "MCDatabaseModelContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта MCDatabaseModelContainer.
        /// </summary>
        public MCDatabaseModelContainer(string connectionString) : base(connectionString, "MCDatabaseModelContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// Инициализация нового объекта MCDatabaseModelContainer.
        /// </summary>
        public MCDatabaseModelContainer(EntityConnection connection) : base(connection, "MCDatabaseModelContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region Разделяемые методы
    
        partial void OnContextCreated();
    
        #endregion
    
        #region Свойства ObjectSet
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<Buildings> BuildingsНабор
        {
            get
            {
                if ((_BuildingsНабор == null))
                {
                    _BuildingsНабор = base.CreateObjectSet<Buildings>("BuildingsНабор");
                }
                return _BuildingsНабор;
            }
        }
        private ObjectSet<Buildings> _BuildingsНабор;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<DateTimeImtervals> DateTimeImtervalsНабор
        {
            get
            {
                if ((_DateTimeImtervalsНабор == null))
                {
                    _DateTimeImtervalsНабор = base.CreateObjectSet<DateTimeImtervals>("DateTimeImtervalsНабор");
                }
                return _DateTimeImtervalsНабор;
            }
        }
        private ObjectSet<DateTimeImtervals> _DateTimeImtervalsНабор;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<NormativeCalculation> NormativeCalculationНабор
        {
            get
            {
                if ((_NormativeCalculationНабор == null))
                {
                    _NormativeCalculationНабор = base.CreateObjectSet<NormativeCalculation>("NormativeCalculationНабор");
                }
                return _NormativeCalculationНабор;
            }
        }
        private ObjectSet<NormativeCalculation> _NormativeCalculationНабор;
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        public ObjectSet<ContractConsumptionHeat> ContractConsumptionHeatTable
        {
            get
            {
                if ((_ContractConsumptionHeatTable == null))
                {
                    _ContractConsumptionHeatTable = base.CreateObjectSet<ContractConsumptionHeat>("ContractConsumptionHeatTable");
                }
                return _ContractConsumptionHeatTable;
            }
        }
        private ObjectSet<ContractConsumptionHeat> _ContractConsumptionHeatTable;

        #endregion
        #region Методы AddTo
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet BuildingsНабор. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToBuildingsНабор(Buildings buildings)
        {
            base.AddObject("BuildingsНабор", buildings);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet DateTimeImtervalsНабор. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToDateTimeImtervalsНабор(DateTimeImtervals dateTimeImtervals)
        {
            base.AddObject("DateTimeImtervalsНабор", dateTimeImtervals);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet NormativeCalculationНабор. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToNormativeCalculationНабор(NormativeCalculation normativeCalculation)
        {
            base.AddObject("NormativeCalculationНабор", normativeCalculation);
        }
    
        /// <summary>
        /// Устаревший метод для добавления новых объектов в набор EntitySet ContractConsumptionHeatTable. Взамен можно использовать метод .Add связанного свойства ObjectSet&lt;T&gt;.
        /// </summary>
        public void AddToContractConsumptionHeatTable(ContractConsumptionHeat contractConsumptionHeat)
        {
            base.AddObject("ContractConsumptionHeatTable", contractConsumptionHeat);
        }

        #endregion
    }
    

    #endregion
    
    #region Сущности
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MCDatabaseModel", Name="Buildings")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class Buildings : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта Buildings.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="name">Исходное значение свойства Name.</param>
        /// <param name="description">Исходное значение свойства Description.</param>
        /// <param name="estimateConsumptionHeat">Исходное значение свойства EstimateConsumptionHeat.</param>
        public static Buildings CreateBuildings(global::System.Int32 id, global::System.String name, global::System.String description, global::System.String estimateConsumptionHeat)
        {
            Buildings buildings = new Buildings();
            buildings.Id = id;
            buildings.Name = name;
            buildings.Description = description;
            buildings.EstimateConsumptionHeat = estimateConsumptionHeat;
            return buildings;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Name
        {
            get
            {
                return _Name;
            }
            set
            {
                OnNameChanging(value);
                ReportPropertyChanging("Name");
                _Name = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Name");
                OnNameChanged();
            }
        }
        private global::System.String _Name;
        partial void OnNameChanging(global::System.String value);
        partial void OnNameChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String Description
        {
            get
            {
                return _Description;
            }
            set
            {
                OnDescriptionChanging(value);
                ReportPropertyChanging("Description");
                _Description = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("Description");
                OnDescriptionChanged();
            }
        }
        private global::System.String _Description;
        partial void OnDescriptionChanging(global::System.String value);
        partial void OnDescriptionChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String EstimateConsumptionHeat
        {
            get
            {
                return _EstimateConsumptionHeat;
            }
            set
            {
                OnEstimateConsumptionHeatChanging(value);
                ReportPropertyChanging("EstimateConsumptionHeat");
                _EstimateConsumptionHeat = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("EstimateConsumptionHeat");
                OnEstimateConsumptionHeatChanged();
            }
        }
        private global::System.String _EstimateConsumptionHeat;
        partial void OnEstimateConsumptionHeatChanging(global::System.String value);
        partial void OnEstimateConsumptionHeatChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "BuildingsDateTimeImtervals", "DateTimeImtervals")]
        public EntityCollection<DateTimeImtervals> DateTimeImtervals
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<DateTimeImtervals>("MCDatabaseModel.BuildingsDateTimeImtervals", "DateTimeImtervals");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<DateTimeImtervals>("MCDatabaseModel.BuildingsDateTimeImtervals", "DateTimeImtervals", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "BuildingsContractConsumptionHeat", "ContractConsumptionHeat")]
        public EntityCollection<ContractConsumptionHeat> ContractConsumptionHeat
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<ContractConsumptionHeat>("MCDatabaseModel.BuildingsContractConsumptionHeat", "ContractConsumptionHeat");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<ContractConsumptionHeat>("MCDatabaseModel.BuildingsContractConsumptionHeat", "ContractConsumptionHeat", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "BuildingsNormativeCalculation", "NormativeCalculation")]
        public EntityCollection<NormativeCalculation> NormativeCalculation
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<NormativeCalculation>("MCDatabaseModel.BuildingsNormativeCalculation", "NormativeCalculation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<NormativeCalculation>("MCDatabaseModel.BuildingsNormativeCalculation", "NormativeCalculation", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MCDatabaseModel", Name="ContractConsumptionHeat")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class ContractConsumptionHeat : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта ContractConsumptionHeat.
        /// </summary>
        /// <param name="id">Исходное значение свойства ID.</param>
        /// <param name="airTemperature">Исходное значение свойства AirTemperature.</param>
        /// <param name="heatByLoading">Исходное значение свойства HeatByLoading.</param>
        /// <param name="peopleCount">Исходное значение свойства PeopleCount.</param>
        /// <param name="hotWaterByNorm">Исходное значение свойства HotWaterByNorm.</param>
        /// <param name="totalHeatConsumption">Исходное значение свойства TotalHeatConsumption.</param>
        /// <param name="buildingsId">Исходное значение свойства BuildingsId.</param>
        public static ContractConsumptionHeat CreateContractConsumptionHeat(global::System.Int32 id, global::System.String airTemperature, global::System.String heatByLoading, global::System.String peopleCount, global::System.String hotWaterByNorm, global::System.String totalHeatConsumption, global::System.Int32 buildingsId)
        {
            ContractConsumptionHeat contractConsumptionHeat = new ContractConsumptionHeat();
            contractConsumptionHeat.ID = id;
            contractConsumptionHeat.AirTemperature = airTemperature;
            contractConsumptionHeat.HeatByLoading = heatByLoading;
            contractConsumptionHeat.PeopleCount = peopleCount;
            contractConsumptionHeat.HotWaterByNorm = hotWaterByNorm;
            contractConsumptionHeat.TotalHeatConsumption = totalHeatConsumption;
            contractConsumptionHeat.BuildingsId = buildingsId;
            return contractConsumptionHeat;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 ID
        {
            get
            {
                return _ID;
            }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    ReportPropertyChanging("ID");
                    _ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("ID");
                    OnIDChanged();
                }
            }
        }
        private global::System.Int32 _ID;
        partial void OnIDChanging(global::System.Int32 value);
        partial void OnIDChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String AirTemperature
        {
            get
            {
                return _AirTemperature;
            }
            set
            {
                OnAirTemperatureChanging(value);
                ReportPropertyChanging("AirTemperature");
                _AirTemperature = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("AirTemperature");
                OnAirTemperatureChanged();
            }
        }
        private global::System.String _AirTemperature;
        partial void OnAirTemperatureChanging(global::System.String value);
        partial void OnAirTemperatureChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String HeatByLoading
        {
            get
            {
                return _HeatByLoading;
            }
            set
            {
                OnHeatByLoadingChanging(value);
                ReportPropertyChanging("HeatByLoading");
                _HeatByLoading = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("HeatByLoading");
                OnHeatByLoadingChanged();
            }
        }
        private global::System.String _HeatByLoading;
        partial void OnHeatByLoadingChanging(global::System.String value);
        partial void OnHeatByLoadingChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String PeopleCount
        {
            get
            {
                return _PeopleCount;
            }
            set
            {
                OnPeopleCountChanging(value);
                ReportPropertyChanging("PeopleCount");
                _PeopleCount = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("PeopleCount");
                OnPeopleCountChanged();
            }
        }
        private global::System.String _PeopleCount;
        partial void OnPeopleCountChanging(global::System.String value);
        partial void OnPeopleCountChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String HotWaterByNorm
        {
            get
            {
                return _HotWaterByNorm;
            }
            set
            {
                OnHotWaterByNormChanging(value);
                ReportPropertyChanging("HotWaterByNorm");
                _HotWaterByNorm = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("HotWaterByNorm");
                OnHotWaterByNormChanged();
            }
        }
        private global::System.String _HotWaterByNorm;
        partial void OnHotWaterByNormChanging(global::System.String value);
        partial void OnHotWaterByNormChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TotalHeatConsumption
        {
            get
            {
                return _TotalHeatConsumption;
            }
            set
            {
                OnTotalHeatConsumptionChanging(value);
                ReportPropertyChanging("TotalHeatConsumption");
                _TotalHeatConsumption = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("TotalHeatConsumption");
                OnTotalHeatConsumptionChanged();
            }
        }
        private global::System.String _TotalHeatConsumption;
        partial void OnTotalHeatConsumptionChanging(global::System.String value);
        partial void OnTotalHeatConsumptionChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 BuildingsId
        {
            get
            {
                return _BuildingsId;
            }
            set
            {
                OnBuildingsIdChanging(value);
                ReportPropertyChanging("BuildingsId");
                _BuildingsId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("BuildingsId");
                OnBuildingsIdChanged();
            }
        }
        private global::System.Int32 _BuildingsId;
        partial void OnBuildingsIdChanging(global::System.Int32 value);
        partial void OnBuildingsIdChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "BuildingsContractConsumptionHeat", "Buildings")]
        public Buildings Buildings
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Buildings>("MCDatabaseModel.BuildingsContractConsumptionHeat", "Buildings").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Buildings>("MCDatabaseModel.BuildingsContractConsumptionHeat", "Buildings").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Buildings> BuildingsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Buildings>("MCDatabaseModel.BuildingsContractConsumptionHeat", "Buildings");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Buildings>("MCDatabaseModel.BuildingsContractConsumptionHeat", "Buildings", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "ContractConsumptionHeatDateTimeImtervals", "DateTimeImtervals")]
        public DateTimeImtervals DateTimeImtervals
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DateTimeImtervals>("MCDatabaseModel.ContractConsumptionHeatDateTimeImtervals", "DateTimeImtervals").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DateTimeImtervals>("MCDatabaseModel.ContractConsumptionHeatDateTimeImtervals", "DateTimeImtervals").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<DateTimeImtervals> DateTimeImtervalsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DateTimeImtervals>("MCDatabaseModel.ContractConsumptionHeatDateTimeImtervals", "DateTimeImtervals");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<DateTimeImtervals>("MCDatabaseModel.ContractConsumptionHeatDateTimeImtervals", "DateTimeImtervals", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MCDatabaseModel", Name="DateTimeImtervals")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class DateTimeImtervals : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта DateTimeImtervals.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="startDate">Исходное значение свойства StartDate.</param>
        /// <param name="endDate">Исходное значение свойства EndDate.</param>
        /// <param name="buildingsId">Исходное значение свойства BuildingsId.</param>
        public static DateTimeImtervals CreateDateTimeImtervals(global::System.Int32 id, global::System.String startDate, global::System.String endDate, global::System.Int32 buildingsId)
        {
            DateTimeImtervals dateTimeImtervals = new DateTimeImtervals();
            dateTimeImtervals.Id = id;
            dateTimeImtervals.StartDate = startDate;
            dateTimeImtervals.EndDate = endDate;
            dateTimeImtervals.BuildingsId = buildingsId;
            return dateTimeImtervals;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String StartDate
        {
            get
            {
                return _StartDate;
            }
            set
            {
                OnStartDateChanging(value);
                ReportPropertyChanging("StartDate");
                _StartDate = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("StartDate");
                OnStartDateChanged();
            }
        }
        private global::System.String _StartDate;
        partial void OnStartDateChanging(global::System.String value);
        partial void OnStartDateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String EndDate
        {
            get
            {
                return _EndDate;
            }
            set
            {
                OnEndDateChanging(value);
                ReportPropertyChanging("EndDate");
                _EndDate = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("EndDate");
                OnEndDateChanged();
            }
        }
        private global::System.String _EndDate;
        partial void OnEndDateChanging(global::System.String value);
        partial void OnEndDateChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 BuildingsId
        {
            get
            {
                return _BuildingsId;
            }
            set
            {
                OnBuildingsIdChanging(value);
                ReportPropertyChanging("BuildingsId");
                _BuildingsId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("BuildingsId");
                OnBuildingsIdChanged();
            }
        }
        private global::System.Int32 _BuildingsId;
        partial void OnBuildingsIdChanging(global::System.Int32 value);
        partial void OnBuildingsIdChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "BuildingsDateTimeImtervals", "Buildings")]
        public Buildings Buildings
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Buildings>("MCDatabaseModel.BuildingsDateTimeImtervals", "Buildings").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Buildings>("MCDatabaseModel.BuildingsDateTimeImtervals", "Buildings").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Buildings> BuildingsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Buildings>("MCDatabaseModel.BuildingsDateTimeImtervals", "Buildings");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Buildings>("MCDatabaseModel.BuildingsDateTimeImtervals", "Buildings", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "ContractConsumptionHeatDateTimeImtervals", "ContractConsumptionHeat")]
        public ContractConsumptionHeat ContractConsumptionHeat
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ContractConsumptionHeat>("MCDatabaseModel.ContractConsumptionHeatDateTimeImtervals", "ContractConsumptionHeat").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ContractConsumptionHeat>("MCDatabaseModel.ContractConsumptionHeatDateTimeImtervals", "ContractConsumptionHeat").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<ContractConsumptionHeat> ContractConsumptionHeatReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<ContractConsumptionHeat>("MCDatabaseModel.ContractConsumptionHeatDateTimeImtervals", "ContractConsumptionHeat");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<ContractConsumptionHeat>("MCDatabaseModel.ContractConsumptionHeatDateTimeImtervals", "ContractConsumptionHeat", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "NormativeCalculationDateTimeImtervals", "NormativeCalculation")]
        public NormativeCalculation NormativeCalculation
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<NormativeCalculation>("MCDatabaseModel.NormativeCalculationDateTimeImtervals", "NormativeCalculation").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<NormativeCalculation>("MCDatabaseModel.NormativeCalculationDateTimeImtervals", "NormativeCalculation").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<NormativeCalculation> NormativeCalculationReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<NormativeCalculation>("MCDatabaseModel.NormativeCalculationDateTimeImtervals", "NormativeCalculation");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<NormativeCalculation>("MCDatabaseModel.NormativeCalculationDateTimeImtervals", "NormativeCalculation", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// Нет доступной документации по метаданным.
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="MCDatabaseModel", Name="NormativeCalculation")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class NormativeCalculation : EntityObject
    {
        #region Фабричный метод
    
        /// <summary>
        /// Создание нового объекта NormativeCalculation.
        /// </summary>
        /// <param name="id">Исходное значение свойства Id.</param>
        /// <param name="totalArea">Исходное значение свойства TotalArea.</param>
        /// <param name="calculationArea">Исходное значение свойства CalculationArea.</param>
        /// <param name="standartOfHeat">Исходное значение свойства StandartOfHeat.</param>
        /// <param name="consumptionHeatByTotalArea">Исходное значение свойства ConsumptionHeatByTotalArea.</param>
        /// <param name="consumptionHeatByCalculationArea">Исходное значение свойства ConsumptionHeatByCalculationArea.</param>
        /// <param name="totalNormativeHeat">Исходное значение свойства TotalNormativeHeat.</param>
        /// <param name="buildingsId">Исходное значение свойства BuildingsId.</param>
        public static NormativeCalculation CreateNormativeCalculation(global::System.Int32 id, global::System.String totalArea, global::System.String calculationArea, global::System.String standartOfHeat, global::System.String consumptionHeatByTotalArea, global::System.String consumptionHeatByCalculationArea, global::System.String totalNormativeHeat, global::System.Int32 buildingsId)
        {
            NormativeCalculation normativeCalculation = new NormativeCalculation();
            normativeCalculation.Id = id;
            normativeCalculation.TotalArea = totalArea;
            normativeCalculation.CalculationArea = calculationArea;
            normativeCalculation.StandartOfHeat = standartOfHeat;
            normativeCalculation.ConsumptionHeatByTotalArea = consumptionHeatByTotalArea;
            normativeCalculation.ConsumptionHeatByCalculationArea = consumptionHeatByCalculationArea;
            normativeCalculation.TotalNormativeHeat = totalNormativeHeat;
            normativeCalculation.BuildingsId = buildingsId;
            return normativeCalculation;
        }

        #endregion
        #region Свойства-примитивы
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 Id
        {
            get
            {
                return _Id;
            }
            set
            {
                if (_Id != value)
                {
                    OnIdChanging(value);
                    ReportPropertyChanging("Id");
                    _Id = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("Id");
                    OnIdChanged();
                }
            }
        }
        private global::System.Int32 _Id;
        partial void OnIdChanging(global::System.Int32 value);
        partial void OnIdChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TotalArea
        {
            get
            {
                return _TotalArea;
            }
            set
            {
                OnTotalAreaChanging(value);
                ReportPropertyChanging("TotalArea");
                _TotalArea = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("TotalArea");
                OnTotalAreaChanged();
            }
        }
        private global::System.String _TotalArea;
        partial void OnTotalAreaChanging(global::System.String value);
        partial void OnTotalAreaChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String CalculationArea
        {
            get
            {
                return _CalculationArea;
            }
            set
            {
                OnCalculationAreaChanging(value);
                ReportPropertyChanging("CalculationArea");
                _CalculationArea = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("CalculationArea");
                OnCalculationAreaChanged();
            }
        }
        private global::System.String _CalculationArea;
        partial void OnCalculationAreaChanging(global::System.String value);
        partial void OnCalculationAreaChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String StandartOfHeat
        {
            get
            {
                return _StandartOfHeat;
            }
            set
            {
                OnStandartOfHeatChanging(value);
                ReportPropertyChanging("StandartOfHeat");
                _StandartOfHeat = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("StandartOfHeat");
                OnStandartOfHeatChanged();
            }
        }
        private global::System.String _StandartOfHeat;
        partial void OnStandartOfHeatChanging(global::System.String value);
        partial void OnStandartOfHeatChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ConsumptionHeatByTotalArea
        {
            get
            {
                return _ConsumptionHeatByTotalArea;
            }
            set
            {
                OnConsumptionHeatByTotalAreaChanging(value);
                ReportPropertyChanging("ConsumptionHeatByTotalArea");
                _ConsumptionHeatByTotalArea = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ConsumptionHeatByTotalArea");
                OnConsumptionHeatByTotalAreaChanged();
            }
        }
        private global::System.String _ConsumptionHeatByTotalArea;
        partial void OnConsumptionHeatByTotalAreaChanging(global::System.String value);
        partial void OnConsumptionHeatByTotalAreaChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String ConsumptionHeatByCalculationArea
        {
            get
            {
                return _ConsumptionHeatByCalculationArea;
            }
            set
            {
                OnConsumptionHeatByCalculationAreaChanging(value);
                ReportPropertyChanging("ConsumptionHeatByCalculationArea");
                _ConsumptionHeatByCalculationArea = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("ConsumptionHeatByCalculationArea");
                OnConsumptionHeatByCalculationAreaChanged();
            }
        }
        private global::System.String _ConsumptionHeatByCalculationArea;
        partial void OnConsumptionHeatByCalculationAreaChanging(global::System.String value);
        partial void OnConsumptionHeatByCalculationAreaChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TotalNormativeHeat
        {
            get
            {
                return _TotalNormativeHeat;
            }
            set
            {
                OnTotalNormativeHeatChanging(value);
                ReportPropertyChanging("TotalNormativeHeat");
                _TotalNormativeHeat = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("TotalNormativeHeat");
                OnTotalNormativeHeatChanged();
            }
        }
        private global::System.String _TotalNormativeHeat;
        partial void OnTotalNormativeHeatChanging(global::System.String value);
        partial void OnTotalNormativeHeatChanged();
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 BuildingsId
        {
            get
            {
                return _BuildingsId;
            }
            set
            {
                OnBuildingsIdChanging(value);
                ReportPropertyChanging("BuildingsId");
                _BuildingsId = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("BuildingsId");
                OnBuildingsIdChanged();
            }
        }
        private global::System.Int32 _BuildingsId;
        partial void OnBuildingsIdChanging(global::System.Int32 value);
        partial void OnBuildingsIdChanged();

        #endregion
    
        #region Свойства навигации
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "BuildingsNormativeCalculation", "Buildings")]
        public Buildings Buildings
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Buildings>("MCDatabaseModel.BuildingsNormativeCalculation", "Buildings").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Buildings>("MCDatabaseModel.BuildingsNormativeCalculation", "Buildings").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<Buildings> BuildingsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<Buildings>("MCDatabaseModel.BuildingsNormativeCalculation", "Buildings");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<Buildings>("MCDatabaseModel.BuildingsNormativeCalculation", "Buildings", value);
                }
            }
        }
    
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("MCDatabaseModel", "NormativeCalculationDateTimeImtervals", "DateTimeImtervals")]
        public DateTimeImtervals DateTimeImtervals
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DateTimeImtervals>("MCDatabaseModel.NormativeCalculationDateTimeImtervals", "DateTimeImtervals").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DateTimeImtervals>("MCDatabaseModel.NormativeCalculationDateTimeImtervals", "DateTimeImtervals").Value = value;
            }
        }
        /// <summary>
        /// Нет доступной документации по метаданным.
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<DateTimeImtervals> DateTimeImtervalsReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<DateTimeImtervals>("MCDatabaseModel.NormativeCalculationDateTimeImtervals", "DateTimeImtervals");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<DateTimeImtervals>("MCDatabaseModel.NormativeCalculationDateTimeImtervals", "DateTimeImtervals", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
