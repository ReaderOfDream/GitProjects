//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace ManagementCompany {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("masterDataSet")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class masterDataSet : global::System.Data.DataSet {
        
        private WholeTableSetDataTable tableWholeTableSet;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public masterDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected masterDataSet(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["WholeTableSet"] != null)) {
                    base.Tables.Add(new WholeTableSetDataTable(ds.Tables["WholeTableSet"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public WholeTableSetDataTable WholeTableSet {
            get {
                return this.tableWholeTableSet;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public override global::System.Data.DataSet Clone() {
            masterDataSet cln = ((masterDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["WholeTableSet"] != null)) {
                    base.Tables.Add(new WholeTableSetDataTable(ds.Tables["WholeTableSet"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal void InitVars(bool initTable) {
            this.tableWholeTableSet = ((WholeTableSetDataTable)(base.Tables["WholeTableSet"]));
            if ((initTable == true)) {
                if ((this.tableWholeTableSet != null)) {
                    this.tableWholeTableSet.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitClass() {
            this.DataSetName = "masterDataSet";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/masterDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableWholeTableSet = new WholeTableSetDataTable();
            base.Tables.Add(this.tableWholeTableSet);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private bool ShouldSerializeWholeTableSet() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            masterDataSet ds = new masterDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public delegate void WholeTableSetRowChangeEventHandler(object sender, WholeTableSetRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class WholeTableSetDataTable : global::System.Data.TypedTableBase<WholeTableSetRow> {
            
            private global::System.Data.DataColumn columnId;
            
            private global::System.Data.DataColumn columnBuildingName;
            
            private global::System.Data.DataColumn columnBuildingDescription;
            
            private global::System.Data.DataColumn columnBuildingStandartOfHeat;
            
            private global::System.Data.DataColumn columnBuildingTotalArea;
            
            private global::System.Data.DataColumn columnHeatSupplierName;
            
            private global::System.Data.DataColumn columnHeatSupplierDescription;
            
            private global::System.Data.DataColumn columnDateTimeIntervalStartDate;
            
            private global::System.Data.DataColumn columnDateTimeIntervalEndDate;
            
            private global::System.Data.DataColumn columnDateTimeIntervalName;
            
            private global::System.Data.DataColumn columnClearingRequirements;
            
            private global::System.Data.DataColumn columnClearingCalculationHot;
            
            private global::System.Data.DataColumn columnClearingCalculationByBuhgaltery;
            
            private global::System.Data.DataColumn columnMeterReadingHeat;
            
            private global::System.Data.DataColumn columnMeterReadingWater;
            
            private global::System.Data.DataColumn columnContractHeatByLoading;
            
            private global::System.Data.DataColumn columnContractPeopleCount;
            
            private global::System.Data.DataColumn columnContractHotWaterByNorm;
            
            private global::System.Data.DataColumn columnContractTotalHeatConsumption;
            
            private global::System.Data.DataColumn columnNormativeCalculationArea;
            
            private global::System.Data.DataColumn columnNormativeEstimateConsumptionHeat;
            
            private global::System.Data.DataColumn columnNormativConsumptionHeatByTotalArea;
            
            private global::System.Data.DataColumn columnNormativeConsumptionHeatByCalculationArea;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public WholeTableSetDataTable() {
                this.TableName = "WholeTableSet";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal WholeTableSetDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected WholeTableSetDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn IdColumn {
                get {
                    return this.columnId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn BuildingNameColumn {
                get {
                    return this.columnBuildingName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn BuildingDescriptionColumn {
                get {
                    return this.columnBuildingDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn BuildingStandartOfHeatColumn {
                get {
                    return this.columnBuildingStandartOfHeat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn BuildingTotalAreaColumn {
                get {
                    return this.columnBuildingTotalArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn HeatSupplierNameColumn {
                get {
                    return this.columnHeatSupplierName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn HeatSupplierDescriptionColumn {
                get {
                    return this.columnHeatSupplierDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DateTimeIntervalStartDateColumn {
                get {
                    return this.columnDateTimeIntervalStartDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DateTimeIntervalEndDateColumn {
                get {
                    return this.columnDateTimeIntervalEndDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn DateTimeIntervalNameColumn {
                get {
                    return this.columnDateTimeIntervalName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ClearingRequirementsColumn {
                get {
                    return this.columnClearingRequirements;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ClearingCalculationHotColumn {
                get {
                    return this.columnClearingCalculationHot;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ClearingCalculationByBuhgalteryColumn {
                get {
                    return this.columnClearingCalculationByBuhgaltery;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MeterReadingHeatColumn {
                get {
                    return this.columnMeterReadingHeat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn MeterReadingWaterColumn {
                get {
                    return this.columnMeterReadingWater;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ContractHeatByLoadingColumn {
                get {
                    return this.columnContractHeatByLoading;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ContractPeopleCountColumn {
                get {
                    return this.columnContractPeopleCount;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ContractHotWaterByNormColumn {
                get {
                    return this.columnContractHotWaterByNorm;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn ContractTotalHeatConsumptionColumn {
                get {
                    return this.columnContractTotalHeatConsumption;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NormativeCalculationAreaColumn {
                get {
                    return this.columnNormativeCalculationArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NormativeEstimateConsumptionHeatColumn {
                get {
                    return this.columnNormativeEstimateConsumptionHeat;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NormativConsumptionHeatByTotalAreaColumn {
                get {
                    return this.columnNormativConsumptionHeatByTotalArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataColumn NormativeConsumptionHeatByCalculationAreaColumn {
                get {
                    return this.columnNormativeConsumptionHeatByCalculationArea;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public WholeTableSetRow this[int index] {
                get {
                    return ((WholeTableSetRow)(this.Rows[index]));
                }
            }
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event WholeTableSetRowChangeEventHandler WholeTableSetRowChanging;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event WholeTableSetRowChangeEventHandler WholeTableSetRowChanged;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event WholeTableSetRowChangeEventHandler WholeTableSetRowDeleting;
            
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public event WholeTableSetRowChangeEventHandler WholeTableSetRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void AddWholeTableSetRow(WholeTableSetRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public WholeTableSetRow AddWholeTableSetRow(
                        string BuildingName, 
                        string BuildingDescription, 
                        double BuildingStandartOfHeat, 
                        double BuildingTotalArea, 
                        string HeatSupplierName, 
                        string HeatSupplierDescription, 
                        System.DateTime DateTimeIntervalStartDate, 
                        System.DateTime DateTimeIntervalEndDate, 
                        string DateTimeIntervalName, 
                        double ClearingRequirements, 
                        double ClearingCalculationHot, 
                        double ClearingCalculationByBuhgaltery, 
                        double MeterReadingHeat, 
                        double MeterReadingWater, 
                        double ContractHeatByLoading, 
                        double ContractPeopleCount, 
                        double ContractHotWaterByNorm, 
                        double ContractTotalHeatConsumption, 
                        double NormativeCalculationArea, 
                        double NormativeEstimateConsumptionHeat, 
                        double NormativConsumptionHeatByTotalArea, 
                        double NormativeConsumptionHeatByCalculationArea) {
                WholeTableSetRow rowWholeTableSetRow = ((WholeTableSetRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        BuildingName,
                        BuildingDescription,
                        BuildingStandartOfHeat,
                        BuildingTotalArea,
                        HeatSupplierName,
                        HeatSupplierDescription,
                        DateTimeIntervalStartDate,
                        DateTimeIntervalEndDate,
                        DateTimeIntervalName,
                        ClearingRequirements,
                        ClearingCalculationHot,
                        ClearingCalculationByBuhgaltery,
                        MeterReadingHeat,
                        MeterReadingWater,
                        ContractHeatByLoading,
                        ContractPeopleCount,
                        ContractHotWaterByNorm,
                        ContractTotalHeatConsumption,
                        NormativeCalculationArea,
                        NormativeEstimateConsumptionHeat,
                        NormativConsumptionHeatByTotalArea,
                        NormativeConsumptionHeatByCalculationArea};
                rowWholeTableSetRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowWholeTableSetRow);
                return rowWholeTableSetRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public WholeTableSetRow FindById(int Id) {
                return ((WholeTableSetRow)(this.Rows.Find(new object[] {
                            Id})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public override global::System.Data.DataTable Clone() {
                WholeTableSetDataTable cln = ((WholeTableSetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataTable CreateInstance() {
                return new WholeTableSetDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal void InitVars() {
                this.columnId = base.Columns["Id"];
                this.columnBuildingName = base.Columns["BuildingName"];
                this.columnBuildingDescription = base.Columns["BuildingDescription"];
                this.columnBuildingStandartOfHeat = base.Columns["BuildingStandartOfHeat"];
                this.columnBuildingTotalArea = base.Columns["BuildingTotalArea"];
                this.columnHeatSupplierName = base.Columns["HeatSupplierName"];
                this.columnHeatSupplierDescription = base.Columns["HeatSupplierDescription"];
                this.columnDateTimeIntervalStartDate = base.Columns["DateTimeIntervalStartDate"];
                this.columnDateTimeIntervalEndDate = base.Columns["DateTimeIntervalEndDate"];
                this.columnDateTimeIntervalName = base.Columns["DateTimeIntervalName"];
                this.columnClearingRequirements = base.Columns["ClearingRequirements"];
                this.columnClearingCalculationHot = base.Columns["ClearingCalculationHot"];
                this.columnClearingCalculationByBuhgaltery = base.Columns["ClearingCalculationByBuhgaltery"];
                this.columnMeterReadingHeat = base.Columns["MeterReadingHeat"];
                this.columnMeterReadingWater = base.Columns["MeterReadingWater"];
                this.columnContractHeatByLoading = base.Columns["ContractHeatByLoading"];
                this.columnContractPeopleCount = base.Columns["ContractPeopleCount"];
                this.columnContractHotWaterByNorm = base.Columns["ContractHotWaterByNorm"];
                this.columnContractTotalHeatConsumption = base.Columns["ContractTotalHeatConsumption"];
                this.columnNormativeCalculationArea = base.Columns["NormativeCalculationArea"];
                this.columnNormativeEstimateConsumptionHeat = base.Columns["NormativeEstimateConsumptionHeat"];
                this.columnNormativConsumptionHeatByTotalArea = base.Columns["NormativConsumptionHeatByTotalArea"];
                this.columnNormativeConsumptionHeatByCalculationArea = base.Columns["NormativeConsumptionHeatByCalculationArea"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private void InitClass() {
                this.columnId = new global::System.Data.DataColumn("Id", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnId);
                this.columnBuildingName = new global::System.Data.DataColumn("BuildingName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuildingName);
                this.columnBuildingDescription = new global::System.Data.DataColumn("BuildingDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuildingDescription);
                this.columnBuildingStandartOfHeat = new global::System.Data.DataColumn("BuildingStandartOfHeat", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuildingStandartOfHeat);
                this.columnBuildingTotalArea = new global::System.Data.DataColumn("BuildingTotalArea", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBuildingTotalArea);
                this.columnHeatSupplierName = new global::System.Data.DataColumn("HeatSupplierName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeatSupplierName);
                this.columnHeatSupplierDescription = new global::System.Data.DataColumn("HeatSupplierDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHeatSupplierDescription);
                this.columnDateTimeIntervalStartDate = new global::System.Data.DataColumn("DateTimeIntervalStartDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateTimeIntervalStartDate);
                this.columnDateTimeIntervalEndDate = new global::System.Data.DataColumn("DateTimeIntervalEndDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateTimeIntervalEndDate);
                this.columnDateTimeIntervalName = new global::System.Data.DataColumn("DateTimeIntervalName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDateTimeIntervalName);
                this.columnClearingRequirements = new global::System.Data.DataColumn("ClearingRequirements", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClearingRequirements);
                this.columnClearingCalculationHot = new global::System.Data.DataColumn("ClearingCalculationHot", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClearingCalculationHot);
                this.columnClearingCalculationByBuhgaltery = new global::System.Data.DataColumn("ClearingCalculationByBuhgaltery", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClearingCalculationByBuhgaltery);
                this.columnMeterReadingHeat = new global::System.Data.DataColumn("MeterReadingHeat", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeterReadingHeat);
                this.columnMeterReadingWater = new global::System.Data.DataColumn("MeterReadingWater", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMeterReadingWater);
                this.columnContractHeatByLoading = new global::System.Data.DataColumn("ContractHeatByLoading", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContractHeatByLoading);
                this.columnContractPeopleCount = new global::System.Data.DataColumn("ContractPeopleCount", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContractPeopleCount);
                this.columnContractHotWaterByNorm = new global::System.Data.DataColumn("ContractHotWaterByNorm", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContractHotWaterByNorm);
                this.columnContractTotalHeatConsumption = new global::System.Data.DataColumn("ContractTotalHeatConsumption", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContractTotalHeatConsumption);
                this.columnNormativeCalculationArea = new global::System.Data.DataColumn("NormativeCalculationArea", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNormativeCalculationArea);
                this.columnNormativeEstimateConsumptionHeat = new global::System.Data.DataColumn("NormativeEstimateConsumptionHeat", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNormativeEstimateConsumptionHeat);
                this.columnNormativConsumptionHeatByTotalArea = new global::System.Data.DataColumn("NormativConsumptionHeatByTotalArea", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNormativConsumptionHeatByTotalArea);
                this.columnNormativeConsumptionHeatByCalculationArea = new global::System.Data.DataColumn("NormativeConsumptionHeatByCalculationArea", typeof(double), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNormativeConsumptionHeatByCalculationArea);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnId}, true));
                this.columnId.AutoIncrement = true;
                this.columnId.AutoIncrementSeed = -1;
                this.columnId.AutoIncrementStep = -1;
                this.columnId.AllowDBNull = false;
                this.columnId.ReadOnly = true;
                this.columnId.Unique = true;
                this.columnBuildingName.AllowDBNull = false;
                this.columnBuildingName.MaxLength = 2147483647;
                this.columnBuildingDescription.AllowDBNull = false;
                this.columnBuildingDescription.MaxLength = 2147483647;
                this.columnBuildingStandartOfHeat.AllowDBNull = false;
                this.columnBuildingTotalArea.AllowDBNull = false;
                this.columnHeatSupplierName.AllowDBNull = false;
                this.columnHeatSupplierName.MaxLength = 2147483647;
                this.columnHeatSupplierDescription.AllowDBNull = false;
                this.columnHeatSupplierDescription.MaxLength = 2147483647;
                this.columnDateTimeIntervalName.MaxLength = 2147483647;
                this.columnClearingRequirements.AllowDBNull = false;
                this.columnClearingCalculationHot.AllowDBNull = false;
                this.columnClearingCalculationByBuhgaltery.AllowDBNull = false;
                this.columnMeterReadingHeat.AllowDBNull = false;
                this.columnMeterReadingWater.AllowDBNull = false;
                this.columnContractHeatByLoading.AllowDBNull = false;
                this.columnContractPeopleCount.AllowDBNull = false;
                this.columnContractHotWaterByNorm.AllowDBNull = false;
                this.columnContractTotalHeatConsumption.AllowDBNull = false;
                this.columnNormativeCalculationArea.AllowDBNull = false;
                this.columnNormativeEstimateConsumptionHeat.AllowDBNull = false;
                this.columnNormativConsumptionHeatByTotalArea.AllowDBNull = false;
                this.columnNormativeConsumptionHeatByCalculationArea.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public WholeTableSetRow NewWholeTableSetRow() {
                return ((WholeTableSetRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new WholeTableSetRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override global::System.Type GetRowType() {
                return typeof(WholeTableSetRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.WholeTableSetRowChanged != null)) {
                    this.WholeTableSetRowChanged(this, new WholeTableSetRowChangeEvent(((WholeTableSetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.WholeTableSetRowChanging != null)) {
                    this.WholeTableSetRowChanging(this, new WholeTableSetRowChangeEvent(((WholeTableSetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.WholeTableSetRowDeleted != null)) {
                    this.WholeTableSetRowDeleted(this, new WholeTableSetRowChangeEvent(((WholeTableSetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.WholeTableSetRowDeleting != null)) {
                    this.WholeTableSetRowDeleting(this, new WholeTableSetRowChangeEvent(((WholeTableSetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void RemoveWholeTableSetRow(WholeTableSetRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                masterDataSet ds = new masterDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "WholeTableSetDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class WholeTableSetRow : global::System.Data.DataRow {
            
            private WholeTableSetDataTable tableWholeTableSet;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal WholeTableSetRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableWholeTableSet = ((WholeTableSetDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Id {
                get {
                    return ((int)(this[this.tableWholeTableSet.IdColumn]));
                }
                set {
                    this[this.tableWholeTableSet.IdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string BuildingName {
                get {
                    return ((string)(this[this.tableWholeTableSet.BuildingNameColumn]));
                }
                set {
                    this[this.tableWholeTableSet.BuildingNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string BuildingDescription {
                get {
                    return ((string)(this[this.tableWholeTableSet.BuildingDescriptionColumn]));
                }
                set {
                    this[this.tableWholeTableSet.BuildingDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double BuildingStandartOfHeat {
                get {
                    return ((double)(this[this.tableWholeTableSet.BuildingStandartOfHeatColumn]));
                }
                set {
                    this[this.tableWholeTableSet.BuildingStandartOfHeatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double BuildingTotalArea {
                get {
                    return ((double)(this[this.tableWholeTableSet.BuildingTotalAreaColumn]));
                }
                set {
                    this[this.tableWholeTableSet.BuildingTotalAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string HeatSupplierName {
                get {
                    return ((string)(this[this.tableWholeTableSet.HeatSupplierNameColumn]));
                }
                set {
                    this[this.tableWholeTableSet.HeatSupplierNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string HeatSupplierDescription {
                get {
                    return ((string)(this[this.tableWholeTableSet.HeatSupplierDescriptionColumn]));
                }
                set {
                    this[this.tableWholeTableSet.HeatSupplierDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime DateTimeIntervalStartDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableWholeTableSet.DateTimeIntervalStartDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateTimeIntervalStartDate\' in table \'WholeTableSet\' is DBNu" +
                                "ll.", e);
                    }
                }
                set {
                    this[this.tableWholeTableSet.DateTimeIntervalStartDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public System.DateTime DateTimeIntervalEndDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableWholeTableSet.DateTimeIntervalEndDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateTimeIntervalEndDate\' in table \'WholeTableSet\' is DBNull" +
                                ".", e);
                    }
                }
                set {
                    this[this.tableWholeTableSet.DateTimeIntervalEndDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public string DateTimeIntervalName {
                get {
                    try {
                        return ((string)(this[this.tableWholeTableSet.DateTimeIntervalNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DateTimeIntervalName\' in table \'WholeTableSet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableWholeTableSet.DateTimeIntervalNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double ClearingRequirements {
                get {
                    return ((double)(this[this.tableWholeTableSet.ClearingRequirementsColumn]));
                }
                set {
                    this[this.tableWholeTableSet.ClearingRequirementsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double ClearingCalculationHot {
                get {
                    return ((double)(this[this.tableWholeTableSet.ClearingCalculationHotColumn]));
                }
                set {
                    this[this.tableWholeTableSet.ClearingCalculationHotColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double ClearingCalculationByBuhgaltery {
                get {
                    return ((double)(this[this.tableWholeTableSet.ClearingCalculationByBuhgalteryColumn]));
                }
                set {
                    this[this.tableWholeTableSet.ClearingCalculationByBuhgalteryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double MeterReadingHeat {
                get {
                    return ((double)(this[this.tableWholeTableSet.MeterReadingHeatColumn]));
                }
                set {
                    this[this.tableWholeTableSet.MeterReadingHeatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double MeterReadingWater {
                get {
                    return ((double)(this[this.tableWholeTableSet.MeterReadingWaterColumn]));
                }
                set {
                    this[this.tableWholeTableSet.MeterReadingWaterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double ContractHeatByLoading {
                get {
                    return ((double)(this[this.tableWholeTableSet.ContractHeatByLoadingColumn]));
                }
                set {
                    this[this.tableWholeTableSet.ContractHeatByLoadingColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double ContractPeopleCount {
                get {
                    return ((double)(this[this.tableWholeTableSet.ContractPeopleCountColumn]));
                }
                set {
                    this[this.tableWholeTableSet.ContractPeopleCountColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double ContractHotWaterByNorm {
                get {
                    return ((double)(this[this.tableWholeTableSet.ContractHotWaterByNormColumn]));
                }
                set {
                    this[this.tableWholeTableSet.ContractHotWaterByNormColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double ContractTotalHeatConsumption {
                get {
                    return ((double)(this[this.tableWholeTableSet.ContractTotalHeatConsumptionColumn]));
                }
                set {
                    this[this.tableWholeTableSet.ContractTotalHeatConsumptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double NormativeCalculationArea {
                get {
                    return ((double)(this[this.tableWholeTableSet.NormativeCalculationAreaColumn]));
                }
                set {
                    this[this.tableWholeTableSet.NormativeCalculationAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double NormativeEstimateConsumptionHeat {
                get {
                    return ((double)(this[this.tableWholeTableSet.NormativeEstimateConsumptionHeatColumn]));
                }
                set {
                    this[this.tableWholeTableSet.NormativeEstimateConsumptionHeatColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double NormativConsumptionHeatByTotalArea {
                get {
                    return ((double)(this[this.tableWholeTableSet.NormativConsumptionHeatByTotalAreaColumn]));
                }
                set {
                    this[this.tableWholeTableSet.NormativConsumptionHeatByTotalAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public double NormativeConsumptionHeatByCalculationArea {
                get {
                    return ((double)(this[this.tableWholeTableSet.NormativeConsumptionHeatByCalculationAreaColumn]));
                }
                set {
                    this[this.tableWholeTableSet.NormativeConsumptionHeatByCalculationAreaColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDateTimeIntervalStartDateNull() {
                return this.IsNull(this.tableWholeTableSet.DateTimeIntervalStartDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDateTimeIntervalStartDateNull() {
                this[this.tableWholeTableSet.DateTimeIntervalStartDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDateTimeIntervalEndDateNull() {
                return this.IsNull(this.tableWholeTableSet.DateTimeIntervalEndDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDateTimeIntervalEndDateNull() {
                this[this.tableWholeTableSet.DateTimeIntervalEndDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public bool IsDateTimeIntervalNameNull() {
                return this.IsNull(this.tableWholeTableSet.DateTimeIntervalNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public void SetDateTimeIntervalNameNull() {
                this[this.tableWholeTableSet.DateTimeIntervalNameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public class WholeTableSetRowChangeEvent : global::System.EventArgs {
            
            private WholeTableSetRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public WholeTableSetRowChangeEvent(WholeTableSetRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public WholeTableSetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
namespace ManagementCompany.masterDataSetTableAdapters {
    
    
    /// <summary>
    ///Represents the connection and commands used to retrieve and save data.
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DataObjectAttribute(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner" +
        ", Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
    public partial class WholeTableSetTableAdapter : global::System.ComponentModel.Component {
        
        private global::System.Data.SqlClient.SqlDataAdapter _adapter;
        
        private global::System.Data.SqlClient.SqlConnection _connection;
        
        private global::System.Data.SqlClient.SqlTransaction _transaction;
        
        private global::System.Data.SqlClient.SqlCommand[] _commandCollection;
        
        private bool _clearBeforeFill;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public WholeTableSetTableAdapter() {
            this.ClearBeforeFill = true;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected internal global::System.Data.SqlClient.SqlDataAdapter Adapter {
            get {
                if ((this._adapter == null)) {
                    this.InitAdapter();
                }
                return this._adapter;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlConnection Connection {
            get {
                if ((this._connection == null)) {
                    this.InitConnection();
                }
                return this._connection;
            }
            set {
                this._connection = value;
                if ((this.Adapter.InsertCommand != null)) {
                    this.Adapter.InsertCommand.Connection = value;
                }
                if ((this.Adapter.DeleteCommand != null)) {
                    this.Adapter.DeleteCommand.Connection = value;
                }
                if ((this.Adapter.UpdateCommand != null)) {
                    this.Adapter.UpdateCommand.Connection = value;
                }
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    if ((this.CommandCollection[i] != null)) {
                        ((global::System.Data.SqlClient.SqlCommand)(this.CommandCollection[i])).Connection = value;
                    }
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        internal global::System.Data.SqlClient.SqlTransaction Transaction {
            get {
                return this._transaction;
            }
            set {
                this._transaction = value;
                for (int i = 0; (i < this.CommandCollection.Length); i = (i + 1)) {
                    this.CommandCollection[i].Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.DeleteCommand != null))) {
                    this.Adapter.DeleteCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.InsertCommand != null))) {
                    this.Adapter.InsertCommand.Transaction = this._transaction;
                }
                if (((this.Adapter != null) 
                            && (this.Adapter.UpdateCommand != null))) {
                    this.Adapter.UpdateCommand.Transaction = this._transaction;
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected global::System.Data.SqlClient.SqlCommand[] CommandCollection {
            get {
                if ((this._commandCollection == null)) {
                    this.InitCommandCollection();
                }
                return this._commandCollection;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool ClearBeforeFill {
            get {
                return this._clearBeforeFill;
            }
            set {
                this._clearBeforeFill = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitAdapter() {
            this._adapter = new global::System.Data.SqlClient.SqlDataAdapter();
            global::System.Data.Common.DataTableMapping tableMapping = new global::System.Data.Common.DataTableMapping();
            tableMapping.SourceTable = "Table";
            tableMapping.DataSetTable = "WholeTableSet";
            tableMapping.ColumnMappings.Add("Id", "Id");
            tableMapping.ColumnMappings.Add("BuildingName", "BuildingName");
            tableMapping.ColumnMappings.Add("BuildingDescription", "BuildingDescription");
            tableMapping.ColumnMappings.Add("BuildingStandartOfHeat", "BuildingStandartOfHeat");
            tableMapping.ColumnMappings.Add("BuildingTotalArea", "BuildingTotalArea");
            tableMapping.ColumnMappings.Add("HeatSupplierName", "HeatSupplierName");
            tableMapping.ColumnMappings.Add("HeatSupplierDescription", "HeatSupplierDescription");
            tableMapping.ColumnMappings.Add("DateTimeIntervalStartDate", "DateTimeIntervalStartDate");
            tableMapping.ColumnMappings.Add("DateTimeIntervalEndDate", "DateTimeIntervalEndDate");
            tableMapping.ColumnMappings.Add("DateTimeIntervalName", "DateTimeIntervalName");
            tableMapping.ColumnMappings.Add("ClearingRequirements", "ClearingRequirements");
            tableMapping.ColumnMappings.Add("ClearingCalculationHot", "ClearingCalculationHot");
            tableMapping.ColumnMappings.Add("ClearingCalculationByBuhgaltery", "ClearingCalculationByBuhgaltery");
            tableMapping.ColumnMappings.Add("MeterReadingHeat", "MeterReadingHeat");
            tableMapping.ColumnMappings.Add("MeterReadingWater", "MeterReadingWater");
            tableMapping.ColumnMappings.Add("ContractHeatByLoading", "ContractHeatByLoading");
            tableMapping.ColumnMappings.Add("ContractPeopleCount", "ContractPeopleCount");
            tableMapping.ColumnMappings.Add("ContractHotWaterByNorm", "ContractHotWaterByNorm");
            tableMapping.ColumnMappings.Add("ContractTotalHeatConsumption", "ContractTotalHeatConsumption");
            tableMapping.ColumnMappings.Add("NormativeCalculationArea", "NormativeCalculationArea");
            tableMapping.ColumnMappings.Add("NormativeEstimateConsumptionHeat", "NormativeEstimateConsumptionHeat");
            tableMapping.ColumnMappings.Add("NormativConsumptionHeatByTotalArea", "NormativConsumptionHeatByTotalArea");
            tableMapping.ColumnMappings.Add("NormativeConsumptionHeatByCalculationArea", "NormativeConsumptionHeatByCalculationArea");
            this._adapter.TableMappings.Add(tableMapping);
            this._adapter.DeleteCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.DeleteCommand.Connection = this.Connection;
            this._adapter.DeleteCommand.CommandText = @"DELETE FROM [dbo].[WholeTableSet] WHERE (([Id] = @Original_Id) AND ([BuildingStandartOfHeat] = @Original_BuildingStandartOfHeat) AND ([BuildingTotalArea] = @Original_BuildingTotalArea) AND ((@IsNull_DateTimeIntervalStartDate = 1 AND [DateTimeIntervalStartDate] IS NULL) OR ([DateTimeIntervalStartDate] = @Original_DateTimeIntervalStartDate)) AND ((@IsNull_DateTimeIntervalEndDate = 1 AND [DateTimeIntervalEndDate] IS NULL) OR ([DateTimeIntervalEndDate] = @Original_DateTimeIntervalEndDate)) AND ([ClearingRequirements] = @Original_ClearingRequirements) AND ([ClearingCalculationHot] = @Original_ClearingCalculationHot) AND ([ClearingCalculationByBuhgaltery] = @Original_ClearingCalculationByBuhgaltery) AND ([MeterReadingHeat] = @Original_MeterReadingHeat) AND ([MeterReadingWater] = @Original_MeterReadingWater) AND ([ContractHeatByLoading] = @Original_ContractHeatByLoading) AND ([ContractPeopleCount] = @Original_ContractPeopleCount) AND ([ContractHotWaterByNorm] = @Original_ContractHotWaterByNorm) AND ([ContractTotalHeatConsumption] = @Original_ContractTotalHeatConsumption) AND ([NormativeCalculationArea] = @Original_NormativeCalculationArea) AND ([NormativeEstimateConsumptionHeat] = @Original_NormativeEstimateConsumptionHeat) AND ([NormativConsumptionHeatByTotalArea] = @Original_NormativConsumptionHeatByTotalArea) AND ([NormativeConsumptionHeatByCalculationArea] = @Original_NormativeConsumptionHeatByCalculationArea))";
            this._adapter.DeleteCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BuildingStandartOfHeat", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BuildingStandartOfHeat", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BuildingTotalArea", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BuildingTotalArea", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DateTimeIntervalStartDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateTimeIntervalStartDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DateTimeIntervalStartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateTimeIntervalStartDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DateTimeIntervalEndDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateTimeIntervalEndDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DateTimeIntervalEndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateTimeIntervalEndDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ClearingRequirements", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClearingRequirements", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ClearingCalculationHot", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClearingCalculationHot", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ClearingCalculationByBuhgaltery", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClearingCalculationByBuhgaltery", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MeterReadingHeat", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MeterReadingHeat", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MeterReadingWater", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MeterReadingWater", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ContractHeatByLoading", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ContractHeatByLoading", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ContractPeopleCount", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ContractPeopleCount", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ContractHotWaterByNorm", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ContractHotWaterByNorm", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ContractTotalHeatConsumption", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ContractTotalHeatConsumption", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NormativeCalculationArea", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NormativeCalculationArea", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NormativeEstimateConsumptionHeat", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NormativeEstimateConsumptionHeat", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NormativConsumptionHeatByTotalArea", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NormativConsumptionHeatByTotalArea", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.DeleteCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NormativeConsumptionHeatByCalculationArea", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NormativeConsumptionHeatByCalculationArea", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.InsertCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.InsertCommand.Connection = this.Connection;
            this._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[WholeTableSet] ([BuildingName], [BuildingDescription], [Buildi" +
                "ngStandartOfHeat], [BuildingTotalArea], [HeatSupplierName], [HeatSupplierDescrip" +
                "tion], [DateTimeIntervalStartDate], [DateTimeIntervalEndDate], [DateTimeInterval" +
                "Name], [ClearingRequirements], [ClearingCalculationHot], [ClearingCalculationByB" +
                "uhgaltery], [MeterReadingHeat], [MeterReadingWater], [ContractHeatByLoading], [C" +
                "ontractPeopleCount], [ContractHotWaterByNorm], [ContractTotalHeatConsumption], [" +
                "NormativeCalculationArea], [NormativeEstimateConsumptionHeat], [NormativConsumpt" +
                "ionHeatByTotalArea], [NormativeConsumptionHeatByCalculationArea]) VALUES (@Build" +
                "ingName, @BuildingDescription, @BuildingStandartOfHeat, @BuildingTotalArea, @Hea" +
                "tSupplierName, @HeatSupplierDescription, @DateTimeIntervalStartDate, @DateTimeIn" +
                "tervalEndDate, @DateTimeIntervalName, @ClearingRequirements, @ClearingCalculatio" +
                "nHot, @ClearingCalculationByBuhgaltery, @MeterReadingHeat, @MeterReadingWater, @" +
                "ContractHeatByLoading, @ContractPeopleCount, @ContractHotWaterByNorm, @ContractT" +
                "otalHeatConsumption, @NormativeCalculationArea, @NormativeEstimateConsumptionHea" +
                "t, @NormativConsumptionHeatByTotalArea, @NormativeConsumptionHeatByCalculationAr" +
                "ea);\r\nSELECT Id, BuildingName, BuildingDescription, BuildingStandartOfHeat, Buil" +
                "dingTotalArea, HeatSupplierName, HeatSupplierDescription, DateTimeIntervalStartD" +
                "ate, DateTimeIntervalEndDate, DateTimeIntervalName, ClearingRequirements, Cleari" +
                "ngCalculationHot, ClearingCalculationByBuhgaltery, MeterReadingHeat, MeterReadin" +
                "gWater, ContractHeatByLoading, ContractPeopleCount, ContractHotWaterByNorm, Cont" +
                "ractTotalHeatConsumption, NormativeCalculationArea, NormativeEstimateConsumption" +
                "Heat, NormativConsumptionHeatByTotalArea, NormativeConsumptionHeatByCalculationA" +
                "rea FROM WholeTableSet WHERE (Id = SCOPE_IDENTITY())";
            this._adapter.InsertCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BuildingName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BuildingName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BuildingDescription", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BuildingDescription", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BuildingStandartOfHeat", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BuildingStandartOfHeat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BuildingTotalArea", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BuildingTotalArea", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeatSupplierName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeatSupplierName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeatSupplierDescription", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeatSupplierDescription", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DateTimeIntervalStartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateTimeIntervalStartDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DateTimeIntervalEndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateTimeIntervalEndDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DateTimeIntervalName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateTimeIntervalName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ClearingRequirements", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClearingRequirements", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ClearingCalculationHot", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClearingCalculationHot", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ClearingCalculationByBuhgaltery", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClearingCalculationByBuhgaltery", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MeterReadingHeat", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MeterReadingHeat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MeterReadingWater", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MeterReadingWater", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ContractHeatByLoading", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ContractHeatByLoading", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ContractPeopleCount", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ContractPeopleCount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ContractHotWaterByNorm", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ContractHotWaterByNorm", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ContractTotalHeatConsumption", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ContractTotalHeatConsumption", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NormativeCalculationArea", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NormativeCalculationArea", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NormativeEstimateConsumptionHeat", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NormativeEstimateConsumptionHeat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NormativConsumptionHeatByTotalArea", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NormativConsumptionHeatByTotalArea", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.InsertCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NormativeConsumptionHeatByCalculationArea", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NormativeConsumptionHeatByCalculationArea", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand = new global::System.Data.SqlClient.SqlCommand();
            this._adapter.UpdateCommand.Connection = this.Connection;
            this._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[WholeTableSet] SET [BuildingName] = @BuildingName, [BuildingDescrip" +
                "tion] = @BuildingDescription, [BuildingStandartOfHeat] = @BuildingStandartOfHeat" +
                ", [BuildingTotalArea] = @BuildingTotalArea, [HeatSupplierName] = @HeatSupplierNa" +
                "me, [HeatSupplierDescription] = @HeatSupplierDescription, [DateTimeIntervalStart" +
                "Date] = @DateTimeIntervalStartDate, [DateTimeIntervalEndDate] = @DateTimeInterva" +
                "lEndDate, [DateTimeIntervalName] = @DateTimeIntervalName, [ClearingRequirements]" +
                " = @ClearingRequirements, [ClearingCalculationHot] = @ClearingCalculationHot, [C" +
                "learingCalculationByBuhgaltery] = @ClearingCalculationByBuhgaltery, [MeterReadin" +
                "gHeat] = @MeterReadingHeat, [MeterReadingWater] = @MeterReadingWater, [ContractH" +
                "eatByLoading] = @ContractHeatByLoading, [ContractPeopleCount] = @ContractPeopleC" +
                "ount, [ContractHotWaterByNorm] = @ContractHotWaterByNorm, [ContractTotalHeatCons" +
                "umption] = @ContractTotalHeatConsumption, [NormativeCalculationArea] = @Normativ" +
                "eCalculationArea, [NormativeEstimateConsumptionHeat] = @NormativeEstimateConsump" +
                "tionHeat, [NormativConsumptionHeatByTotalArea] = @NormativConsumptionHeatByTotal" +
                "Area, [NormativeConsumptionHeatByCalculationArea] = @NormativeConsumptionHeatByC" +
                "alculationArea WHERE (([Id] = @Original_Id) AND ([BuildingStandartOfHeat] = @Ori" +
                "ginal_BuildingStandartOfHeat) AND ([BuildingTotalArea] = @Original_BuildingTotal" +
                "Area) AND ((@IsNull_DateTimeIntervalStartDate = 1 AND [DateTimeIntervalStartDate" +
                "] IS NULL) OR ([DateTimeIntervalStartDate] = @Original_DateTimeIntervalStartDate" +
                ")) AND ((@IsNull_DateTimeIntervalEndDate = 1 AND [DateTimeIntervalEndDate] IS NU" +
                "LL) OR ([DateTimeIntervalEndDate] = @Original_DateTimeIntervalEndDate)) AND ([Cl" +
                "earingRequirements] = @Original_ClearingRequirements) AND ([ClearingCalculationH" +
                "ot] = @Original_ClearingCalculationHot) AND ([ClearingCalculationByBuhgaltery] =" +
                " @Original_ClearingCalculationByBuhgaltery) AND ([MeterReadingHeat] = @Original_" +
                "MeterReadingHeat) AND ([MeterReadingWater] = @Original_MeterReadingWater) AND ([" +
                "ContractHeatByLoading] = @Original_ContractHeatByLoading) AND ([ContractPeopleCo" +
                "unt] = @Original_ContractPeopleCount) AND ([ContractHotWaterByNorm] = @Original_" +
                "ContractHotWaterByNorm) AND ([ContractTotalHeatConsumption] = @Original_Contract" +
                "TotalHeatConsumption) AND ([NormativeCalculationArea] = @Original_NormativeCalcu" +
                "lationArea) AND ([NormativeEstimateConsumptionHeat] = @Original_NormativeEstimat" +
                "eConsumptionHeat) AND ([NormativConsumptionHeatByTotalArea] = @Original_Normativ" +
                "ConsumptionHeatByTotalArea) AND ([NormativeConsumptionHeatByCalculationArea] = @" +
                "Original_NormativeConsumptionHeatByCalculationArea));\r\nSELECT Id, BuildingName, " +
                "BuildingDescription, BuildingStandartOfHeat, BuildingTotalArea, HeatSupplierName" +
                ", HeatSupplierDescription, DateTimeIntervalStartDate, DateTimeIntervalEndDate, D" +
                "ateTimeIntervalName, ClearingRequirements, ClearingCalculationHot, ClearingCalcu" +
                "lationByBuhgaltery, MeterReadingHeat, MeterReadingWater, ContractHeatByLoading, " +
                "ContractPeopleCount, ContractHotWaterByNorm, ContractTotalHeatConsumption, Norma" +
                "tiveCalculationArea, NormativeEstimateConsumptionHeat, NormativConsumptionHeatBy" +
                "TotalArea, NormativeConsumptionHeatByCalculationArea FROM WholeTableSet WHERE (I" +
                "d = @Id)";
            this._adapter.UpdateCommand.CommandType = global::System.Data.CommandType.Text;
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BuildingName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BuildingName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BuildingDescription", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BuildingDescription", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BuildingStandartOfHeat", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BuildingStandartOfHeat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@BuildingTotalArea", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BuildingTotalArea", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeatSupplierName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeatSupplierName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@HeatSupplierDescription", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "HeatSupplierDescription", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DateTimeIntervalStartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateTimeIntervalStartDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DateTimeIntervalEndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateTimeIntervalEndDate", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@DateTimeIntervalName", global::System.Data.SqlDbType.NVarChar, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateTimeIntervalName", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ClearingRequirements", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClearingRequirements", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ClearingCalculationHot", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClearingCalculationHot", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ClearingCalculationByBuhgaltery", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClearingCalculationByBuhgaltery", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MeterReadingHeat", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MeterReadingHeat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@MeterReadingWater", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MeterReadingWater", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ContractHeatByLoading", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ContractHeatByLoading", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ContractPeopleCount", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ContractPeopleCount", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ContractHotWaterByNorm", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ContractHotWaterByNorm", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@ContractTotalHeatConsumption", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ContractTotalHeatConsumption", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NormativeCalculationArea", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NormativeCalculationArea", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NormativeEstimateConsumptionHeat", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NormativeEstimateConsumptionHeat", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NormativConsumptionHeatByTotalArea", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NormativConsumptionHeatByTotalArea", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@NormativeConsumptionHeatByCalculationArea", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NormativeConsumptionHeatByCalculationArea", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_Id", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "Id", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BuildingStandartOfHeat", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BuildingStandartOfHeat", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_BuildingTotalArea", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "BuildingTotalArea", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DateTimeIntervalStartDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateTimeIntervalStartDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DateTimeIntervalStartDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateTimeIntervalStartDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@IsNull_DateTimeIntervalEndDate", global::System.Data.SqlDbType.Int, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateTimeIntervalEndDate", global::System.Data.DataRowVersion.Original, true, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_DateTimeIntervalEndDate", global::System.Data.SqlDbType.DateTime, 0, global::System.Data.ParameterDirection.Input, 0, 0, "DateTimeIntervalEndDate", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ClearingRequirements", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClearingRequirements", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ClearingCalculationHot", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClearingCalculationHot", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ClearingCalculationByBuhgaltery", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ClearingCalculationByBuhgaltery", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MeterReadingHeat", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MeterReadingHeat", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_MeterReadingWater", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "MeterReadingWater", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ContractHeatByLoading", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ContractHeatByLoading", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ContractPeopleCount", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ContractPeopleCount", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ContractHotWaterByNorm", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ContractHotWaterByNorm", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_ContractTotalHeatConsumption", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "ContractTotalHeatConsumption", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NormativeCalculationArea", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NormativeCalculationArea", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NormativeEstimateConsumptionHeat", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NormativeEstimateConsumptionHeat", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NormativConsumptionHeatByTotalArea", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NormativConsumptionHeatByTotalArea", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Original_NormativeConsumptionHeatByCalculationArea", global::System.Data.SqlDbType.Float, 0, global::System.Data.ParameterDirection.Input, 0, 0, "NormativeConsumptionHeatByCalculationArea", global::System.Data.DataRowVersion.Original, false, null, "", "", ""));
            this._adapter.UpdateCommand.Parameters.Add(new global::System.Data.SqlClient.SqlParameter("@Id", global::System.Data.SqlDbType.Int, 4, global::System.Data.ParameterDirection.Input, 0, 0, "Id", global::System.Data.DataRowVersion.Current, false, null, "", "", ""));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitConnection() {
            this._connection = new global::System.Data.SqlClient.SqlConnection();
            this._connection.ConnectionString = global::ManagementCompany.Properties.Settings.Default.CLERICLAPTOPSQLEXPRESS;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private void InitCommandCollection() {
            this._commandCollection = new global::System.Data.SqlClient.SqlCommand[1];
            this._commandCollection[0] = new global::System.Data.SqlClient.SqlCommand();
            this._commandCollection[0].Connection = this.Connection;
            this._commandCollection[0].CommandText = @"SELECT Id, BuildingName, BuildingDescription, BuildingStandartOfHeat, BuildingTotalArea, HeatSupplierName, HeatSupplierDescription, DateTimeIntervalStartDate, DateTimeIntervalEndDate, DateTimeIntervalName, ClearingRequirements, ClearingCalculationHot, ClearingCalculationByBuhgaltery, MeterReadingHeat, MeterReadingWater, ContractHeatByLoading, ContractPeopleCount, ContractHotWaterByNorm, ContractTotalHeatConsumption, NormativeCalculationArea, NormativeEstimateConsumptionHeat, NormativConsumptionHeatByTotalArea, NormativeConsumptionHeatByCalculationArea FROM dbo.WholeTableSet";
            this._commandCollection[0].CommandType = global::System.Data.CommandType.Text;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Fill, true)]
        public virtual int Fill(masterDataSet.WholeTableSetDataTable dataTable) {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            if ((this.ClearBeforeFill == true)) {
                dataTable.Clear();
            }
            int returnValue = this.Adapter.Fill(dataTable);
            return returnValue;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Select, true)]
        public virtual masterDataSet.WholeTableSetDataTable GetData() {
            this.Adapter.SelectCommand = this.CommandCollection[0];
            masterDataSet.WholeTableSetDataTable dataTable = new masterDataSet.WholeTableSetDataTable();
            this.Adapter.Fill(dataTable);
            return dataTable;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(masterDataSet.WholeTableSetDataTable dataTable) {
            return this.Adapter.Update(dataTable);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(masterDataSet dataSet) {
            return this.Adapter.Update(dataSet, "WholeTableSet");
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow dataRow) {
            return this.Adapter.Update(new global::System.Data.DataRow[] {
                        dataRow});
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        public virtual int Update(global::System.Data.DataRow[] dataRows) {
            return this.Adapter.Update(dataRows);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Delete, true)]
        public virtual int Delete(
                    int Original_Id, 
                    double Original_BuildingStandartOfHeat, 
                    double Original_BuildingTotalArea, 
                    global::System.Nullable<global::System.DateTime> Original_DateTimeIntervalStartDate, 
                    global::System.Nullable<global::System.DateTime> Original_DateTimeIntervalEndDate, 
                    double Original_ClearingRequirements, 
                    double Original_ClearingCalculationHot, 
                    double Original_ClearingCalculationByBuhgaltery, 
                    double Original_MeterReadingHeat, 
                    double Original_MeterReadingWater, 
                    double Original_ContractHeatByLoading, 
                    double Original_ContractPeopleCount, 
                    double Original_ContractHotWaterByNorm, 
                    double Original_ContractTotalHeatConsumption, 
                    double Original_NormativeCalculationArea, 
                    double Original_NormativeEstimateConsumptionHeat, 
                    double Original_NormativConsumptionHeatByTotalArea, 
                    double Original_NormativeConsumptionHeatByCalculationArea) {
            this.Adapter.DeleteCommand.Parameters[0].Value = ((int)(Original_Id));
            this.Adapter.DeleteCommand.Parameters[1].Value = ((double)(Original_BuildingStandartOfHeat));
            this.Adapter.DeleteCommand.Parameters[2].Value = ((double)(Original_BuildingTotalArea));
            if ((Original_DateTimeIntervalStartDate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[4].Value = ((System.DateTime)(Original_DateTimeIntervalStartDate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[3].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[4].Value = global::System.DBNull.Value;
            }
            if ((Original_DateTimeIntervalEndDate.HasValue == true)) {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(0));
                this.Adapter.DeleteCommand.Parameters[6].Value = ((System.DateTime)(Original_DateTimeIntervalEndDate.Value));
            }
            else {
                this.Adapter.DeleteCommand.Parameters[5].Value = ((object)(1));
                this.Adapter.DeleteCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            this.Adapter.DeleteCommand.Parameters[7].Value = ((double)(Original_ClearingRequirements));
            this.Adapter.DeleteCommand.Parameters[8].Value = ((double)(Original_ClearingCalculationHot));
            this.Adapter.DeleteCommand.Parameters[9].Value = ((double)(Original_ClearingCalculationByBuhgaltery));
            this.Adapter.DeleteCommand.Parameters[10].Value = ((double)(Original_MeterReadingHeat));
            this.Adapter.DeleteCommand.Parameters[11].Value = ((double)(Original_MeterReadingWater));
            this.Adapter.DeleteCommand.Parameters[12].Value = ((double)(Original_ContractHeatByLoading));
            this.Adapter.DeleteCommand.Parameters[13].Value = ((double)(Original_ContractPeopleCount));
            this.Adapter.DeleteCommand.Parameters[14].Value = ((double)(Original_ContractHotWaterByNorm));
            this.Adapter.DeleteCommand.Parameters[15].Value = ((double)(Original_ContractTotalHeatConsumption));
            this.Adapter.DeleteCommand.Parameters[16].Value = ((double)(Original_NormativeCalculationArea));
            this.Adapter.DeleteCommand.Parameters[17].Value = ((double)(Original_NormativeEstimateConsumptionHeat));
            this.Adapter.DeleteCommand.Parameters[18].Value = ((double)(Original_NormativConsumptionHeatByTotalArea));
            this.Adapter.DeleteCommand.Parameters[19].Value = ((double)(Original_NormativeConsumptionHeatByCalculationArea));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.DeleteCommand.Connection.State;
            if (((this.Adapter.DeleteCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.DeleteCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.DeleteCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.DeleteCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Insert, true)]
        public virtual int Insert(
                    string BuildingName, 
                    string BuildingDescription, 
                    double BuildingStandartOfHeat, 
                    double BuildingTotalArea, 
                    string HeatSupplierName, 
                    string HeatSupplierDescription, 
                    global::System.Nullable<global::System.DateTime> DateTimeIntervalStartDate, 
                    global::System.Nullable<global::System.DateTime> DateTimeIntervalEndDate, 
                    string DateTimeIntervalName, 
                    double ClearingRequirements, 
                    double ClearingCalculationHot, 
                    double ClearingCalculationByBuhgaltery, 
                    double MeterReadingHeat, 
                    double MeterReadingWater, 
                    double ContractHeatByLoading, 
                    double ContractPeopleCount, 
                    double ContractHotWaterByNorm, 
                    double ContractTotalHeatConsumption, 
                    double NormativeCalculationArea, 
                    double NormativeEstimateConsumptionHeat, 
                    double NormativConsumptionHeatByTotalArea, 
                    double NormativeConsumptionHeatByCalculationArea) {
            if ((BuildingName == null)) {
                throw new global::System.ArgumentNullException("BuildingName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[0].Value = ((string)(BuildingName));
            }
            if ((BuildingDescription == null)) {
                throw new global::System.ArgumentNullException("BuildingDescription");
            }
            else {
                this.Adapter.InsertCommand.Parameters[1].Value = ((string)(BuildingDescription));
            }
            this.Adapter.InsertCommand.Parameters[2].Value = ((double)(BuildingStandartOfHeat));
            this.Adapter.InsertCommand.Parameters[3].Value = ((double)(BuildingTotalArea));
            if ((HeatSupplierName == null)) {
                throw new global::System.ArgumentNullException("HeatSupplierName");
            }
            else {
                this.Adapter.InsertCommand.Parameters[4].Value = ((string)(HeatSupplierName));
            }
            if ((HeatSupplierDescription == null)) {
                throw new global::System.ArgumentNullException("HeatSupplierDescription");
            }
            else {
                this.Adapter.InsertCommand.Parameters[5].Value = ((string)(HeatSupplierDescription));
            }
            if ((DateTimeIntervalStartDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[6].Value = ((System.DateTime)(DateTimeIntervalStartDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((DateTimeIntervalEndDate.HasValue == true)) {
                this.Adapter.InsertCommand.Parameters[7].Value = ((System.DateTime)(DateTimeIntervalEndDate.Value));
            }
            else {
                this.Adapter.InsertCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((DateTimeIntervalName == null)) {
                this.Adapter.InsertCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.InsertCommand.Parameters[8].Value = ((string)(DateTimeIntervalName));
            }
            this.Adapter.InsertCommand.Parameters[9].Value = ((double)(ClearingRequirements));
            this.Adapter.InsertCommand.Parameters[10].Value = ((double)(ClearingCalculationHot));
            this.Adapter.InsertCommand.Parameters[11].Value = ((double)(ClearingCalculationByBuhgaltery));
            this.Adapter.InsertCommand.Parameters[12].Value = ((double)(MeterReadingHeat));
            this.Adapter.InsertCommand.Parameters[13].Value = ((double)(MeterReadingWater));
            this.Adapter.InsertCommand.Parameters[14].Value = ((double)(ContractHeatByLoading));
            this.Adapter.InsertCommand.Parameters[15].Value = ((double)(ContractPeopleCount));
            this.Adapter.InsertCommand.Parameters[16].Value = ((double)(ContractHotWaterByNorm));
            this.Adapter.InsertCommand.Parameters[17].Value = ((double)(ContractTotalHeatConsumption));
            this.Adapter.InsertCommand.Parameters[18].Value = ((double)(NormativeCalculationArea));
            this.Adapter.InsertCommand.Parameters[19].Value = ((double)(NormativeEstimateConsumptionHeat));
            this.Adapter.InsertCommand.Parameters[20].Value = ((double)(NormativConsumptionHeatByTotalArea));
            this.Adapter.InsertCommand.Parameters[21].Value = ((double)(NormativeConsumptionHeatByCalculationArea));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.InsertCommand.Connection.State;
            if (((this.Adapter.InsertCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.InsertCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.InsertCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.InsertCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string BuildingName, 
                    string BuildingDescription, 
                    double BuildingStandartOfHeat, 
                    double BuildingTotalArea, 
                    string HeatSupplierName, 
                    string HeatSupplierDescription, 
                    global::System.Nullable<global::System.DateTime> DateTimeIntervalStartDate, 
                    global::System.Nullable<global::System.DateTime> DateTimeIntervalEndDate, 
                    string DateTimeIntervalName, 
                    double ClearingRequirements, 
                    double ClearingCalculationHot, 
                    double ClearingCalculationByBuhgaltery, 
                    double MeterReadingHeat, 
                    double MeterReadingWater, 
                    double ContractHeatByLoading, 
                    double ContractPeopleCount, 
                    double ContractHotWaterByNorm, 
                    double ContractTotalHeatConsumption, 
                    double NormativeCalculationArea, 
                    double NormativeEstimateConsumptionHeat, 
                    double NormativConsumptionHeatByTotalArea, 
                    double NormativeConsumptionHeatByCalculationArea, 
                    int Original_Id, 
                    double Original_BuildingStandartOfHeat, 
                    double Original_BuildingTotalArea, 
                    global::System.Nullable<global::System.DateTime> Original_DateTimeIntervalStartDate, 
                    global::System.Nullable<global::System.DateTime> Original_DateTimeIntervalEndDate, 
                    double Original_ClearingRequirements, 
                    double Original_ClearingCalculationHot, 
                    double Original_ClearingCalculationByBuhgaltery, 
                    double Original_MeterReadingHeat, 
                    double Original_MeterReadingWater, 
                    double Original_ContractHeatByLoading, 
                    double Original_ContractPeopleCount, 
                    double Original_ContractHotWaterByNorm, 
                    double Original_ContractTotalHeatConsumption, 
                    double Original_NormativeCalculationArea, 
                    double Original_NormativeEstimateConsumptionHeat, 
                    double Original_NormativConsumptionHeatByTotalArea, 
                    double Original_NormativeConsumptionHeatByCalculationArea, 
                    int Id) {
            if ((BuildingName == null)) {
                throw new global::System.ArgumentNullException("BuildingName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[0].Value = ((string)(BuildingName));
            }
            if ((BuildingDescription == null)) {
                throw new global::System.ArgumentNullException("BuildingDescription");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[1].Value = ((string)(BuildingDescription));
            }
            this.Adapter.UpdateCommand.Parameters[2].Value = ((double)(BuildingStandartOfHeat));
            this.Adapter.UpdateCommand.Parameters[3].Value = ((double)(BuildingTotalArea));
            if ((HeatSupplierName == null)) {
                throw new global::System.ArgumentNullException("HeatSupplierName");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[4].Value = ((string)(HeatSupplierName));
            }
            if ((HeatSupplierDescription == null)) {
                throw new global::System.ArgumentNullException("HeatSupplierDescription");
            }
            else {
                this.Adapter.UpdateCommand.Parameters[5].Value = ((string)(HeatSupplierDescription));
            }
            if ((DateTimeIntervalStartDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[6].Value = ((System.DateTime)(DateTimeIntervalStartDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[6].Value = global::System.DBNull.Value;
            }
            if ((DateTimeIntervalEndDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[7].Value = ((System.DateTime)(DateTimeIntervalEndDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[7].Value = global::System.DBNull.Value;
            }
            if ((DateTimeIntervalName == null)) {
                this.Adapter.UpdateCommand.Parameters[8].Value = global::System.DBNull.Value;
            }
            else {
                this.Adapter.UpdateCommand.Parameters[8].Value = ((string)(DateTimeIntervalName));
            }
            this.Adapter.UpdateCommand.Parameters[9].Value = ((double)(ClearingRequirements));
            this.Adapter.UpdateCommand.Parameters[10].Value = ((double)(ClearingCalculationHot));
            this.Adapter.UpdateCommand.Parameters[11].Value = ((double)(ClearingCalculationByBuhgaltery));
            this.Adapter.UpdateCommand.Parameters[12].Value = ((double)(MeterReadingHeat));
            this.Adapter.UpdateCommand.Parameters[13].Value = ((double)(MeterReadingWater));
            this.Adapter.UpdateCommand.Parameters[14].Value = ((double)(ContractHeatByLoading));
            this.Adapter.UpdateCommand.Parameters[15].Value = ((double)(ContractPeopleCount));
            this.Adapter.UpdateCommand.Parameters[16].Value = ((double)(ContractHotWaterByNorm));
            this.Adapter.UpdateCommand.Parameters[17].Value = ((double)(ContractTotalHeatConsumption));
            this.Adapter.UpdateCommand.Parameters[18].Value = ((double)(NormativeCalculationArea));
            this.Adapter.UpdateCommand.Parameters[19].Value = ((double)(NormativeEstimateConsumptionHeat));
            this.Adapter.UpdateCommand.Parameters[20].Value = ((double)(NormativConsumptionHeatByTotalArea));
            this.Adapter.UpdateCommand.Parameters[21].Value = ((double)(NormativeConsumptionHeatByCalculationArea));
            this.Adapter.UpdateCommand.Parameters[22].Value = ((int)(Original_Id));
            this.Adapter.UpdateCommand.Parameters[23].Value = ((double)(Original_BuildingStandartOfHeat));
            this.Adapter.UpdateCommand.Parameters[24].Value = ((double)(Original_BuildingTotalArea));
            if ((Original_DateTimeIntervalStartDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[26].Value = ((System.DateTime)(Original_DateTimeIntervalStartDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[25].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[26].Value = global::System.DBNull.Value;
            }
            if ((Original_DateTimeIntervalEndDate.HasValue == true)) {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(0));
                this.Adapter.UpdateCommand.Parameters[28].Value = ((System.DateTime)(Original_DateTimeIntervalEndDate.Value));
            }
            else {
                this.Adapter.UpdateCommand.Parameters[27].Value = ((object)(1));
                this.Adapter.UpdateCommand.Parameters[28].Value = global::System.DBNull.Value;
            }
            this.Adapter.UpdateCommand.Parameters[29].Value = ((double)(Original_ClearingRequirements));
            this.Adapter.UpdateCommand.Parameters[30].Value = ((double)(Original_ClearingCalculationHot));
            this.Adapter.UpdateCommand.Parameters[31].Value = ((double)(Original_ClearingCalculationByBuhgaltery));
            this.Adapter.UpdateCommand.Parameters[32].Value = ((double)(Original_MeterReadingHeat));
            this.Adapter.UpdateCommand.Parameters[33].Value = ((double)(Original_MeterReadingWater));
            this.Adapter.UpdateCommand.Parameters[34].Value = ((double)(Original_ContractHeatByLoading));
            this.Adapter.UpdateCommand.Parameters[35].Value = ((double)(Original_ContractPeopleCount));
            this.Adapter.UpdateCommand.Parameters[36].Value = ((double)(Original_ContractHotWaterByNorm));
            this.Adapter.UpdateCommand.Parameters[37].Value = ((double)(Original_ContractTotalHeatConsumption));
            this.Adapter.UpdateCommand.Parameters[38].Value = ((double)(Original_NormativeCalculationArea));
            this.Adapter.UpdateCommand.Parameters[39].Value = ((double)(Original_NormativeEstimateConsumptionHeat));
            this.Adapter.UpdateCommand.Parameters[40].Value = ((double)(Original_NormativConsumptionHeatByTotalArea));
            this.Adapter.UpdateCommand.Parameters[41].Value = ((double)(Original_NormativeConsumptionHeatByCalculationArea));
            this.Adapter.UpdateCommand.Parameters[42].Value = ((int)(Id));
            global::System.Data.ConnectionState previousConnectionState = this.Adapter.UpdateCommand.Connection.State;
            if (((this.Adapter.UpdateCommand.Connection.State & global::System.Data.ConnectionState.Open) 
                        != global::System.Data.ConnectionState.Open)) {
                this.Adapter.UpdateCommand.Connection.Open();
            }
            try {
                int returnValue = this.Adapter.UpdateCommand.ExecuteNonQuery();
                return returnValue;
            }
            finally {
                if ((previousConnectionState == global::System.Data.ConnectionState.Closed)) {
                    this.Adapter.UpdateCommand.Connection.Close();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")]
        [global::System.ComponentModel.DataObjectMethodAttribute(global::System.ComponentModel.DataObjectMethodType.Update, true)]
        public virtual int Update(
                    string BuildingName, 
                    string BuildingDescription, 
                    double BuildingStandartOfHeat, 
                    double BuildingTotalArea, 
                    string HeatSupplierName, 
                    string HeatSupplierDescription, 
                    global::System.Nullable<global::System.DateTime> DateTimeIntervalStartDate, 
                    global::System.Nullable<global::System.DateTime> DateTimeIntervalEndDate, 
                    string DateTimeIntervalName, 
                    double ClearingRequirements, 
                    double ClearingCalculationHot, 
                    double ClearingCalculationByBuhgaltery, 
                    double MeterReadingHeat, 
                    double MeterReadingWater, 
                    double ContractHeatByLoading, 
                    double ContractPeopleCount, 
                    double ContractHotWaterByNorm, 
                    double ContractTotalHeatConsumption, 
                    double NormativeCalculationArea, 
                    double NormativeEstimateConsumptionHeat, 
                    double NormativConsumptionHeatByTotalArea, 
                    double NormativeConsumptionHeatByCalculationArea, 
                    int Original_Id, 
                    double Original_BuildingStandartOfHeat, 
                    double Original_BuildingTotalArea, 
                    global::System.Nullable<global::System.DateTime> Original_DateTimeIntervalStartDate, 
                    global::System.Nullable<global::System.DateTime> Original_DateTimeIntervalEndDate, 
                    double Original_ClearingRequirements, 
                    double Original_ClearingCalculationHot, 
                    double Original_ClearingCalculationByBuhgaltery, 
                    double Original_MeterReadingHeat, 
                    double Original_MeterReadingWater, 
                    double Original_ContractHeatByLoading, 
                    double Original_ContractPeopleCount, 
                    double Original_ContractHotWaterByNorm, 
                    double Original_ContractTotalHeatConsumption, 
                    double Original_NormativeCalculationArea, 
                    double Original_NormativeEstimateConsumptionHeat, 
                    double Original_NormativConsumptionHeatByTotalArea, 
                    double Original_NormativeConsumptionHeatByCalculationArea) {
            return this.Update(BuildingName, BuildingDescription, BuildingStandartOfHeat, BuildingTotalArea, HeatSupplierName, HeatSupplierDescription, DateTimeIntervalStartDate, DateTimeIntervalEndDate, DateTimeIntervalName, ClearingRequirements, ClearingCalculationHot, ClearingCalculationByBuhgaltery, MeterReadingHeat, MeterReadingWater, ContractHeatByLoading, ContractPeopleCount, ContractHotWaterByNorm, ContractTotalHeatConsumption, NormativeCalculationArea, NormativeEstimateConsumptionHeat, NormativConsumptionHeatByTotalArea, NormativeConsumptionHeatByCalculationArea, Original_Id, Original_BuildingStandartOfHeat, Original_BuildingTotalArea, Original_DateTimeIntervalStartDate, Original_DateTimeIntervalEndDate, Original_ClearingRequirements, Original_ClearingCalculationHot, Original_ClearingCalculationByBuhgaltery, Original_MeterReadingHeat, Original_MeterReadingWater, Original_ContractHeatByLoading, Original_ContractPeopleCount, Original_ContractHotWaterByNorm, Original_ContractTotalHeatConsumption, Original_NormativeCalculationArea, Original_NormativeEstimateConsumptionHeat, Original_NormativConsumptionHeatByTotalArea, Original_NormativeConsumptionHeatByCalculationArea, Original_Id);
        }
    }
    
    /// <summary>
    ///TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    ///</summary>
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD" +
        "esigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")]
    public partial class TableAdapterManager : global::System.ComponentModel.Component {
        
        private UpdateOrderOption _updateOrder;
        
        private WholeTableSetTableAdapter _wholeTableSetTableAdapter;
        
        private bool _backupDataSetBeforeUpdate;
        
        private global::System.Data.IDbConnection _connection;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public UpdateOrderOption UpdateOrder {
            get {
                return this._updateOrder;
            }
            set {
                this._updateOrder = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso" +
            "ft.VSDesigner, Version=10.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3" +
            "a", "System.Drawing.Design.UITypeEditor")]
        public WholeTableSetTableAdapter WholeTableSetTableAdapter {
            get {
                return this._wholeTableSetTableAdapter;
            }
            set {
                this._wholeTableSetTableAdapter = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public bool BackupDataSetBeforeUpdate {
            get {
                return this._backupDataSetBeforeUpdate;
            }
            set {
                this._backupDataSetBeforeUpdate = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public global::System.Data.IDbConnection Connection {
            get {
                if ((this._connection != null)) {
                    return this._connection;
                }
                if (((this._wholeTableSetTableAdapter != null) 
                            && (this._wholeTableSetTableAdapter.Connection != null))) {
                    return this._wholeTableSetTableAdapter.Connection;
                }
                return null;
            }
            set {
                this._connection = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        [global::System.ComponentModel.Browsable(false)]
        public int TableAdapterInstanceCount {
            get {
                int count = 0;
                if ((this._wholeTableSetTableAdapter != null)) {
                    count = (count + 1);
                }
                return count;
            }
        }
        
        /// <summary>
        ///Update rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateUpdatedRows(masterDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._wholeTableSetTableAdapter != null)) {
                global::System.Data.DataRow[] updatedRows = dataSet.WholeTableSet.Select(null, null, global::System.Data.DataViewRowState.ModifiedCurrent);
                updatedRows = this.GetRealUpdatedRows(updatedRows, allAddedRows);
                if (((updatedRows != null) 
                            && (0 < updatedRows.Length))) {
                    result = (result + this._wholeTableSetTableAdapter.Update(updatedRows));
                    allChangedRows.AddRange(updatedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Insert rows in top-down order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateInsertedRows(masterDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            int result = 0;
            if ((this._wholeTableSetTableAdapter != null)) {
                global::System.Data.DataRow[] addedRows = dataSet.WholeTableSet.Select(null, null, global::System.Data.DataViewRowState.Added);
                if (((addedRows != null) 
                            && (0 < addedRows.Length))) {
                    result = (result + this._wholeTableSetTableAdapter.Update(addedRows));
                    allAddedRows.AddRange(addedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Delete rows in bottom-up order.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private int UpdateDeletedRows(masterDataSet dataSet, global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows) {
            int result = 0;
            if ((this._wholeTableSetTableAdapter != null)) {
                global::System.Data.DataRow[] deletedRows = dataSet.WholeTableSet.Select(null, null, global::System.Data.DataViewRowState.Deleted);
                if (((deletedRows != null) 
                            && (0 < deletedRows.Length))) {
                    result = (result + this._wholeTableSetTableAdapter.Update(deletedRows));
                    allChangedRows.AddRange(deletedRows);
                }
            }
            return result;
        }
        
        /// <summary>
        ///Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private global::System.Data.DataRow[] GetRealUpdatedRows(global::System.Data.DataRow[] updatedRows, global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows) {
            if (((updatedRows == null) 
                        || (updatedRows.Length < 1))) {
                return updatedRows;
            }
            if (((allAddedRows == null) 
                        || (allAddedRows.Count < 1))) {
                return updatedRows;
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> realUpdatedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            for (int i = 0; (i < updatedRows.Length); i = (i + 1)) {
                global::System.Data.DataRow row = updatedRows[i];
                if ((allAddedRows.Contains(row) == false)) {
                    realUpdatedRows.Add(row);
                }
            }
            return realUpdatedRows.ToArray();
        }
        
        /// <summary>
        ///Update all changes to the dataset.
        ///</summary>
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public virtual int UpdateAll(masterDataSet dataSet) {
            if ((dataSet == null)) {
                throw new global::System.ArgumentNullException("dataSet");
            }
            if ((dataSet.HasChanges() == false)) {
                return 0;
            }
            if (((this._wholeTableSetTableAdapter != null) 
                        && (this.MatchTableAdapterConnection(this._wholeTableSetTableAdapter.Connection) == false))) {
                throw new global::System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s" +
                        "tring.");
            }
            global::System.Data.IDbConnection workConnection = this.Connection;
            if ((workConnection == null)) {
                throw new global::System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana" +
                        "ger TableAdapter property to a valid TableAdapter instance.");
            }
            bool workConnOpened = false;
            if (((workConnection.State & global::System.Data.ConnectionState.Broken) 
                        == global::System.Data.ConnectionState.Broken)) {
                workConnection.Close();
            }
            if ((workConnection.State == global::System.Data.ConnectionState.Closed)) {
                workConnection.Open();
                workConnOpened = true;
            }
            global::System.Data.IDbTransaction workTransaction = workConnection.BeginTransaction();
            if ((workTransaction == null)) {
                throw new global::System.ApplicationException("The transaction cannot begin. The current data connection does not support transa" +
                        "ctions or the current state is not allowing the transaction to begin.");
            }
            global::System.Collections.Generic.List<global::System.Data.DataRow> allChangedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.DataRow> allAddedRows = new global::System.Collections.Generic.List<global::System.Data.DataRow>();
            global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter> adaptersWithAcceptChangesDuringUpdate = new global::System.Collections.Generic.List<global::System.Data.Common.DataAdapter>();
            global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection> revertConnections = new global::System.Collections.Generic.Dictionary<object, global::System.Data.IDbConnection>();
            int result = 0;
            global::System.Data.DataSet backupDataSet = null;
            if (this.BackupDataSetBeforeUpdate) {
                backupDataSet = new global::System.Data.DataSet();
                backupDataSet.Merge(dataSet);
            }
            try {
                // ---- Prepare for update -----------
                //
                if ((this._wholeTableSetTableAdapter != null)) {
                    revertConnections.Add(this._wholeTableSetTableAdapter, this._wholeTableSetTableAdapter.Connection);
                    this._wholeTableSetTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(workConnection));
                    this._wholeTableSetTableAdapter.Transaction = ((global::System.Data.SqlClient.SqlTransaction)(workTransaction));
                    if (this._wholeTableSetTableAdapter.Adapter.AcceptChangesDuringUpdate) {
                        this._wholeTableSetTableAdapter.Adapter.AcceptChangesDuringUpdate = false;
                        adaptersWithAcceptChangesDuringUpdate.Add(this._wholeTableSetTableAdapter.Adapter);
                    }
                }
                // 
                //---- Perform updates -----------
                //
                if ((this.UpdateOrder == UpdateOrderOption.UpdateInsertDelete)) {
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                }
                else {
                    result = (result + this.UpdateInsertedRows(dataSet, allAddedRows));
                    result = (result + this.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows));
                }
                result = (result + this.UpdateDeletedRows(dataSet, allChangedRows));
                // 
                //---- Commit updates -----------
                //
                workTransaction.Commit();
                if ((0 < allAddedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                    allAddedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
                if ((0 < allChangedRows.Count)) {
                    global::System.Data.DataRow[] rows = new System.Data.DataRow[allChangedRows.Count];
                    allChangedRows.CopyTo(rows);
                    for (int i = 0; (i < rows.Length); i = (i + 1)) {
                        global::System.Data.DataRow row = rows[i];
                        row.AcceptChanges();
                    }
                }
            }
            catch (global::System.Exception ex) {
                workTransaction.Rollback();
                // ---- Restore the dataset -----------
                if (this.BackupDataSetBeforeUpdate) {
                    global::System.Diagnostics.Debug.Assert((backupDataSet != null));
                    dataSet.Clear();
                    dataSet.Merge(backupDataSet);
                }
                else {
                    if ((0 < allAddedRows.Count)) {
                        global::System.Data.DataRow[] rows = new System.Data.DataRow[allAddedRows.Count];
                        allAddedRows.CopyTo(rows);
                        for (int i = 0; (i < rows.Length); i = (i + 1)) {
                            global::System.Data.DataRow row = rows[i];
                            row.AcceptChanges();
                            row.SetAdded();
                        }
                    }
                }
                throw ex;
            }
            finally {
                if (workConnOpened) {
                    workConnection.Close();
                }
                if ((this._wholeTableSetTableAdapter != null)) {
                    this._wholeTableSetTableAdapter.Connection = ((global::System.Data.SqlClient.SqlConnection)(revertConnections[this._wholeTableSetTableAdapter]));
                    this._wholeTableSetTableAdapter.Transaction = null;
                }
                if ((0 < adaptersWithAcceptChangesDuringUpdate.Count)) {
                    global::System.Data.Common.DataAdapter[] adapters = new System.Data.Common.DataAdapter[adaptersWithAcceptChangesDuringUpdate.Count];
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters);
                    for (int i = 0; (i < adapters.Length); i = (i + 1)) {
                        global::System.Data.Common.DataAdapter adapter = adapters[i];
                        adapter.AcceptChangesDuringUpdate = true;
                    }
                }
            }
            return result;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual void SortSelfReferenceRows(global::System.Data.DataRow[] rows, global::System.Data.DataRelation relation, bool childFirst) {
            global::System.Array.Sort<global::System.Data.DataRow>(rows, new SelfReferenceComparer(relation, childFirst));
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        protected virtual bool MatchTableAdapterConnection(global::System.Data.IDbConnection inputConnection) {
            if ((this._connection != null)) {
                return true;
            }
            if (((this.Connection == null) 
                        || (inputConnection == null))) {
                return true;
            }
            if (string.Equals(this.Connection.ConnectionString, inputConnection.ConnectionString, global::System.StringComparison.Ordinal)) {
                return true;
            }
            return false;
        }
        
        /// <summary>
        ///Update Order Option
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        public enum UpdateOrderOption {
            
            InsertUpdateDelete = 0,
            
            UpdateInsertDelete = 1,
        }
        
        /// <summary>
        ///Used to sort self-referenced table's rows
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
        private class SelfReferenceComparer : object, global::System.Collections.Generic.IComparer<global::System.Data.DataRow> {
            
            private global::System.Data.DataRelation _relation;
            
            private int _childFirst;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            internal SelfReferenceComparer(global::System.Data.DataRelation relation, bool childFirst) {
                this._relation = relation;
                if (childFirst) {
                    this._childFirst = -1;
                }
                else {
                    this._childFirst = 1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            private global::System.Data.DataRow GetRoot(global::System.Data.DataRow row, out int distance) {
                global::System.Diagnostics.Debug.Assert((row != null));
                global::System.Data.DataRow root = row;
                distance = 0;

                global::System.Collections.Generic.IDictionary<global::System.Data.DataRow, global::System.Data.DataRow> traversedRows = new global::System.Collections.Generic.Dictionary<global::System.Data.DataRow, global::System.Data.DataRow>();
                traversedRows[row] = row;

                global::System.Data.DataRow parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                for (
                ; ((parent != null) 
                            && (traversedRows.ContainsKey(parent) == false)); 
                ) {
                    distance = (distance + 1);
                    root = parent;
                    traversedRows[parent] = parent;
                    parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Default);
                }

                if ((distance == 0)) {
                    traversedRows.Clear();
                    traversedRows[row] = row;
                    parent = row.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    for (
                    ; ((parent != null) 
                                && (traversedRows.ContainsKey(parent) == false)); 
                    ) {
                        distance = (distance + 1);
                        root = parent;
                        traversedRows[parent] = parent;
                        parent = parent.GetParentRow(this._relation, global::System.Data.DataRowVersion.Original);
                    }
                }

                return root;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "4.0.0.0")]
            public int Compare(global::System.Data.DataRow row1, global::System.Data.DataRow row2) {
                if (object.ReferenceEquals(row1, row2)) {
                    return 0;
                }
                if ((row1 == null)) {
                    return -1;
                }
                if ((row2 == null)) {
                    return 1;
                }

                int distance1 = 0;
                global::System.Data.DataRow root1 = this.GetRoot(row1, out distance1);

                int distance2 = 0;
                global::System.Data.DataRow root2 = this.GetRoot(row2, out distance2);

                if (object.ReferenceEquals(root1, root2)) {
                    return (this._childFirst * distance1.CompareTo(distance2));
                }
                else {
                    global::System.Diagnostics.Debug.Assert(((root1.Table != null) 
                                    && (root2.Table != null)));
                    if ((root1.Table.Rows.IndexOf(root1) < root2.Table.Rows.IndexOf(root2))) {
                        return -1;
                    }
                    else {
                        return 1;
                    }
                }
            }
        }
    }
}

#pragma warning restore 1591